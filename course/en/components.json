[{"_id":"c-05","_parentId":"b-05","_type":"component","_component":"text","_classes":"","_layout":"full","title":"Introduction","displayTitle":"","body":"A variable, in Computing, is a container where to store an information. For example, in a variable you can store your age, your name, your salary, the picture of your favourite pet. Variables have names, also known as identifiers. The variables below have identifiers a, b, c, and d, respectively. The content of a variable is a value. Variables contain values.","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-10","_parentId":"b-05","_type":"component","_component":"graphic","_classes":"","_layout":"full","_isOptional":true,"title":"c-10","displayTitle":"","body":"","instruction":"","_graphic":{"large":"course/en/images/ch1-p1.jpeg","small":"course/en/images/ch1-p1.jpeg","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-15","_parentId":"b-10","_type":"component","_component":"text","_classes":"","_layout":"full","title":"Naming variables: the identifier","displayTitle":"Naming variables: the identifier","body":"It is helpful to name variables with mnemonic identifiers, rather than just a, b, c, d. etc. For example, we could name the above variable as: <b>age</b>, <b>name</b>, <b>my_salary</b>, <b>my_pet</b>. The underscore character '_' can appear in names: it is often used in identifiers with multiple words. Variable names can be as long as you like. They can contain both letters and numbers, but cannot start with numbers.","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-16","_parentId":"b-10","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"","displayTitle":"","body":"<iframe width = '100%' height = '356' src=https://trinket.io/embed/python/5bf9ddb104?toggleCode=true&runOption=></iframe>","instruction":"As a general rule, if you use letters and numbers only (eventually with the underscore character) to name variables, you are safe enough.","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-17","_parentId":"b-10","_type":"component","_component":"mcq","_classes":"","_layout":"left","_attempts":2,"_questionWeight":1,"_canShowModelAnswer":false,"_shouldDisplayAttempts":false,"_isRandom":true,"_selectable":4,"title":"","displayTitle":"","body":"Which of the following identifiers would be legal?","instruction":"Choose two options and select Submit.","_items":[{"text":"iceman7","_shouldBeSelected":true},{"text":"Young&Restless","_shouldBeSelected":false},{"text":"my_idea","_shouldBeSelected":true},{"text":"your idea","_shouldBeSelected":false}],"_feedback":{"title":"Variables identifier","correct":"Spot on! You can include digits in your identifier provided that they are not placed right at the start. You are also allowed to include special characters like <b>'_'</b>","_partlyCorrect":{"final":"That's partly right! Spaces are not allowed for an identifier. Equally, a variable name cannot contain characters like '&' since this one is also used as an operator"},"_incorrect":{"final":"That's just wrong, maybe have another go..."}},"_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-20","_parentId":"b-10","_type":"component","_component":"graphic","_classes":"","_layout":"right","_isOptional":true,"title":"c-10","displayTitle":"","body":"","instruction":"","_graphic":{"large":"course/en/images/checkpoint.png","small":"course/en/images/checkpoint.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-21","_parentId":"b-15","_type":"component","_component":"text","_classes":"","_layout":"full","title":"Statements and assignments","displayTitle":"Statements and assignments","body":"A statement is a command line that cause an effect. Statements are read and executed by the interpreter Python. Python reads out statements and executes them according to what statements have been made. An important statement is the assignment. An assignment sets the value of a variable. In other words, a value is put into the container named with an identifier.","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-22","_parentId":"b-15","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Introduction","displayTitle":"","body":"<iframe width = '100%' height = '356' src=https://trinket.io/embed/python/92f00e2550?toggleCode=true&runOption=></iframe>","instruction":"Note that the assignment states that the value on the right hand side of = must be put into the variable specified in the left hand side.","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-23","_parentId":"b-15","_type":"component","_component":"text","_classes":"","_layout":"left","title":"Incrementing","displayTitle":"Incrementing","body":"The assignment pictured on the left may seem meaningless when viewed as a mathematical identity. However, in Computing, it is perfectly valid and it states: \"Take the value contained in MyAge, add the value 1 to it and put the final result back into the variable MyAge.\" ","instruction":"It is important that any variable, before being used, is initialised, i.e. it is given a value. For example, it would be an error incrementing a variable that has not been initialised.","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-24","_parentId":"b-15","_type":"component","_component":"graphic","_classes":"","_layout":"right","_isOptional":true,"title":"c-10","displayTitle":"","body":"","instruction":"","_graphic":{"large":"course/en/images/ch1-p2.jpeg","small":"course/en/images/ch1-p2.jpeg","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-25","_parentId":"b-15","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Introduction","displayTitle":"","body":"<iframe width = '100%' height = '200' src=https://trinket.io/embed/python/546829e5f8?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-26","_parentId":"b-15","_type":"component","_component":"graphic","_classes":"","_layout":"left","title":"","displayTitle":"","body":"<iframe width = '100%' height = '420' src=https://trinket.io/embed/python/4d26d759e1?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-27","_parentId":"b-15","_type":"component","_component":"mcq","_classes":"","_layout":"right","_attempts":2,"_questionWeight":1,"_canShowModelAnswer":false,"_shouldDisplayAttempts":false,"_isRandom":true,"_selectable":1,"title":"","displayTitle":"","body":"After running the code on the left, what would be the value of myPints?","instruction":"Choose one option and select Submit.","_items":[{"text":"7","_shouldBeSelected":true},{"text":"3","_shouldBeSelected":false},{"text":"4","_shouldBeSelected":false},{"text":"2","_shouldBeSelected":false}],"_feedback":{"title":"Incrementing","correct":"Spot on! You are incrementing the variable twice by the same amount, 2","_incorrect":{"final":"That's just wrong, maybe have another go..."}},"_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-30","_parentId":"b-20","_type":"component","_component":"narrative","_classes":"","_layout":"full","_comment":"setCompletionOn = inview | allItems","_setCompletionOn":"allItems","_hasNavigationInTextArea":false,"title":"Variable swap","displayTitle":"Variable swap","_items":[{"body":"Let us assign as pet, a dog to a boy and a cat to a girl. We want the swap the two pets between the boy and the girl (aka we want to swap the content of the variable Boy and Girl).","_graphic":{"src":"course/en/images/ch1-p4.png","alt":"Placeholder graphic."}},{"body":"If we assign the content of the girl to the boy, the boy will lose its present content. The information about the dog is lost, and we cannot pass it to the girl anymore.","_graphic":{"src":"course/en/images/ch1-p5.png","alt":"Placeholder graphic."}},{"body":"Any time we would like to swap the content of two variables we need a third, temporary, variable. The sequence of assignments needed to produce the swap is:","_graphic":{"src":"course/en/images/ch1-p6.png","alt":"Placeholder graphic."}}],"_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":true}},{"_id":"c-31","_parentId":"b-20","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Introduction","displayTitle":"","body":"<iframe width = '100%' height = '320' src=https://trinket.io/embed/python/b9ee954e3e?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-32","_parentId":"b-25","_type":"component","_component":"text","_classes":"","_layout":"left","title":"Variable type","displayTitle":"Type of variables","body":"We have seen that variables are container where we can store information. Depending of the type of information we wish to store, the variable used will assume diffrent type. The most common types of variables are: <b>Integer</b>, <b>Real</b>, <b>Character</b>, <b>String</b>, <b>Boolean</b>. <p>A character is a type of variable made by one single character of the keyboard. A string is a word, made by more than one character. Boolean is special type that can have only two values, either True or False.</p> ","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-33","_parentId":"b-25","_type":"component","_component":"graphic","_classes":"","_layout":"right","_isOptional":true,"title":"c-10","displayTitle":"","body":"","instruction":"","_graphic":{"large":"course/en/images/ch1-p8.png","small":"course/en/images/ch1-p8.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-34","_parentId":"b-25","_type":"component","_component":"text","_classes":"","_layout":"full","body":"To assign a number, either integer or real, to a variable is straighfoward, as you have already done. For example, we assign the value of 22 to variable MyAge and the value 1.81 to variable MyHeight as:","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-35","_parentId":"b-25","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"","displayTitle":"","body":"<iframe width = '100%' height = '180' src=https://trinket.io/embed/python/b2eb01122c?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-36","_parentId":"b-25","_type":"component","_component":"text","_classes":"","_layout":"left","body":"More attention is necessary for variables of type Characters and String. In Python there is not net disctinction between a Character and a String: in fact a Character can be seen as a String of one letter only. Hence, we will be dealing with Strings only. <p>A String value is assigned using the single quotation marks.</p> <p> You need to be careful as if you omit the quotation marks, you will generate an error... </p>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-37","_parentId":"b-25","_type":"component","_component":"graphic","_classes":"","_layout":"right","title":"","displayTitle":"","body":"<iframe width = '100%' height = '240' src=https://trinket.io/embed/python/c2789d0253?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-38","_parentId":"b-25","_type":"component","_component":"graphic","_classes":"","_layout":"left","title":"","displayTitle":"","body":"<iframe width = '100%' height = '250' src=https://trinket.io/embed/python/bd6737e430?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-39","_parentId":"b-25","_type":"component","_component":"graphic","_classes":"","_layout":"right","title":"","displayTitle":"","body":"<iframe width = '100%' height = '250' src=https://trinket.io/embed/python/3124482e22?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-395","_parentId":"b-25","_type":"component","_component":"graphic","_classes":"","_layout":"left","title":"","displayTitle":"","body":"<iframe width = '100%' height = '340' src=https://trinket.io/embed/python/366bbc3799?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-396","_parentId":"b-25","_type":"component","_component":"mcq","_classes":"","_layout":"left","_attempts":2,"_questionWeight":1,"_canShowModelAnswer":false,"_shouldDisplayAttempts":false,"_isRandom":true,"_selectable":1,"body":"What would be the ascending order of the variables (f,g,h) after the code on the right is executed (provided they would be all converted to integers)?","instruction":"Choose an option and select Submit.","_items":[{"text":"g, f, h","_shouldBeSelected":true},{"text":"f, g, h","_shouldBeSelected":false},{"text":"h, g, f","_shouldBeSelected":false},{"text":"Two of them are equal","_shouldBeSelected":false}],"_feedback":{"title":"Variables type","correct":"Spot on! The tuple (f, g, h) is actually equal to ('22', '23', 5)","_incorrect":{"final":"That's just wrong, maybe have another go... Please note that f and g are still strings but one is concerned about the integer value stored under them"}},"_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-40","_parentId":"b-30","_type":"component","_component":"text","_classes":"","_layout":"left","title":"Type conversion","displayTitle":"Type conversion","body":"Often, where possible, it is necessary to convert data from one type into another type. For example, real values can be converted to Integers in two ways: <ul><li><b>cutting down</b> to the nearest integer</li> <li><b>rounding</b> to the nearest integer</li></ul> Also, note that some type conversions are impossible, i.e. text (string) to number","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-41","_parentId":"b-30","_type":"component","_component":"graphic","_classes":"","_layout":"right","_isOptional":true,"title":"c-10","displayTitle":"","body":"","instruction":"","_graphic":{"large":"course/en/images/ch1-p9.png","small":"course/en/images/ch1-p9.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-42","_parentId":"b-30","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"","displayTitle":"","body":"<iframe width = '100%' height = '550' src=https://trinket.io/embed/python/142d36b09f?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-43","_parentId":"b-30","_component":"textinput","_classes":"","_isOptional":false,"_isAvailable":true,"_isHidden":false,"_isVisible":true,"_isResetOnRevisit":"false","_ariaLevel":0,"_disableAccessibilityState":false,"title":"","displayTitle":"","body":"What would be the value stored in variable <b>d</b> after running the code on the right hand side? (Enter the closest integer value)","_type":"component","_layout":"left","_onScreen":{"_isEnabled":false,"_classes":"","_percentInviewVertical":50},"instruction":"","_items":[{"_answers":["8"],"prefix":"","suffix":"","placeholder":"Enter the closest integer value"}],"_feedback":{"title":"Type conversion","correct":"Spot on! <b>d</b> = 3 + 3 + 2 = 8","_incorrect":{"final":"That's just wrong, maybe have another go... Please note the difference between round and int"}},"_attempts":2,"_canShowModelAnswer":true,"_canShowFeedback":true,"_canShowMarking":true,"_shouldDisplayAttempts":false,"_isRandom":false,"_recordInteraction":true,"_questionWeight":1,"_allowsAnyCase":false,"_allowsPunctuation":false,"_buttons":{"_submit":{"buttonText":"","ariaLabel":""},"_reset":{"buttonText":"","ariaLabel":""},"_showCorrectAnswer":{"buttonText":"","ariaLabel":""},"_hideCorrectAnswer":{"buttonText":"","ariaLabel":""},"_showFeedback":{"buttonText":"","ariaLabel":""},"remainingAttemptsText":"","remainingAttemptText":""}},{"_id":"c-44","_parentId":"b-30","_type":"component","_component":"graphic","_classes":"","_layout":"right","title":"","displayTitle":"","body":"<iframe width = '100%' height = '200' src=https://trinket.io/embed/python/41df802238?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-45","_parentId":"b-35","_type":"component","_component":"accordion","_classes":"","_layout":"full","title":"Lecture summary","displayTitle":"This lecture at a glance","body":"To summarise today's efforts, you should now be familiar with the concept of <b>variables</b> and their basic <b>types</b>, be familiar with the concept of <b> assignment</b> and last but not least, be able to perform basic variable <b>operations</b>.","instruction":"Select the headings to find out more.","_items":[{"title":"Values. Variables. Statements","body":"<ul> <li>Variables have names, also known as identifiers</li> <li>The content of a variable is a value. Variables contain values </li> <li>Variable names can be as long as you like and may include letters and numbers, but cannot start with numbers</li> <li>A statement is a command line that causes an effect</li>The most common types of variables are: <b>Integer</b>, <b>Real</b>, <b>Character</b>, <b>String</b>, <b>Boolean</b> </li> </ul>","_classes":"align-image-left","_graphic":{"src":"course/en/images/ch1-p8.png","alt":"Placeholder graphic."}},{"title":"Assignments & Swap","body":"<ul> <li>An important statement is the assignment </li> <li> An assignment sets the value of a variable </li> <li> In order to accurately swap the values of two variables, one needs (at least) one additional variable and 3 assignments </li> </ul>","_classes":"align-image-right","_graphic":{"src":"course/en/images/ch1-p6.png","alt":"Placeholder graphic."}},{"title":"Variable Operations & Conversions","body":"<ul> <li>Incrementing is a particular type of assignment that increases the value of a variable by an increment (i.e. 1) </li> <li> Decrementing is a similar assignment that would decrease the value by the same amount </li> <li> Type conversion is the process of converting the value of one data type (real, integer, string) to another data type </li> <li> It is often useful to check the type of a variable. This can be done with the command <b> type() </b> </li> </ul>","_classes":"align-image-left","_graphic":{"src":"course/en/images/ch1-p2.jpeg","alt":"Placeholder graphic."}}],"_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":true}},{"_id":"c-46","_parentId":"b-40","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Tutorial 1","displayTitle":"Tutorial 1: Variables and Statements","body":"<iframe width = '100%' height = '550' src=course/en/pdf/t1.pdf> </iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-46-a","_parentId":"b-41","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task A: Perform a list of instructions","displayTitle":"Task A: Perform a list of instructions","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T1ExA.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-46-b","_parentId":"b-41","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task B: Assignments and basic variable operations","displayTitle":"Task B: Assignments and basic variable operations","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T1ExB.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-46-c","_parentId":"b-41","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task C: Swapping","displayTitle":"Task C: Swapping","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T1ExC.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-46-d","_parentId":"b-41","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task D: Type conversion","displayTitle":"Task D: Type conversion","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T1ExD.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-47","_parentId":"b-45","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Tutorial 2","displayTitle":"Tutorial 2: Lists, Introduction to Loops, Maths and Plotting","body":"<iframe width = '100%' height = '550' src=course/en/pdf/t2.pdf> </iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-47-a","_parentId":"b-46","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task A: Creating Lists","displayTitle":"Task A: Creating Lists","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T2ExA.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-47-b","_parentId":"b-46","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task B: Generating lists","displayTitle":"Task B: Generating lists","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T2ExB.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-47-c","_parentId":"b-46","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task C: Managing lists","displayTitle":"Task C: Managing lists","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T2ExC.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-47-d","_parentId":"b-46","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task D: Maths and plotting functions","displayTitle":"Task D: Maths and plotting functions","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T2ExD.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-48","_parentId":"b-50","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Tutorial 3","displayTitle":"Tutorial 3: Consolidating Counted Loops and Conditional Flow","body":"<iframe width = '100%' height = '550' src=course/en/pdf/t3.pdf> </iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-48-a","_parentId":"b-51","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task A: Consolidating Counted Loops","displayTitle":"Task A: Consolidating Counted Loops","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T3ExA.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-48-b","_parentId":"b-51","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task B: Conditional flow","displayTitle":"Task B: Conditional flow","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T3ExB.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-48-c","_parentId":"b-51","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task C: Finding Pi","displayTitle":"Task C: Finding Pi","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T3ExC.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-48-d","_parentId":"b-51","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task D: Prime numbers","displayTitle":"Task D: Prime numbers","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T3ExD.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-49","_parentId":"b-55","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Tutorial 4","displayTitle":"Tutorial 4: I/O Files and Conditional Flow","body":"<iframe width = '100%' height = '550' src=course/en/pdf/t4.pdf> </iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-49-a","_parentId":"b-56","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task A: I/O Files","displayTitle":"Task A: I/O Files","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T4ExA.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-49-b","_parentId":"b-56","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task B: Searching values in a list","displayTitle":"Task B: Searching values in a list","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T4ExB.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-49-c","_parentId":"b-56","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task C: Series Expansion","displayTitle":"Task C: Series Expansion","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T4ExC.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-49-d","_parentId":"b-56","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task D: Series Expansions","displayTitle":"Task D: Series Expansions","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T4ExD.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-50","_parentId":"b-60","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Tutorial 5","displayTitle":"Tutorial 5: Tuples and Sorting Algorithm","body":"<iframe width = '100%' height = '550' src=course/en/pdf/t5.pdf> </iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-50-a","_parentId":"b-61","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task A: List of tuples","displayTitle":"Task A: List of tuples","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T5ExA.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-50-b","_parentId":"b-61","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task B: Sorting algorithm","displayTitle":"Task B: Sorting algorithm","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T5ExB.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-50-c","_parentId":"b-61","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task C: Count occurences","displayTitle":"Task C: Count occurences","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T5ExC.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-51","_parentId":"b-65","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Tutorial 6","displayTitle":"Tutorial 6: Functions","body":"<iframe width = '100%' height = '550' src=course/en/pdf/t6.pdf> </iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-51-a","_parentId":"b-66","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task A: Factorial again","displayTitle":"Task A: Factorial again","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T6ExA.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-51-b","_parentId":"b-66","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task B: Searies expansion, again","displayTitle":"Task B: Searies expansion, again","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T6ExB.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-51-c","_parentId":"b-66","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task C: Sorting data, again","displayTitle":"Task C: Sorting data, again","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T6ExC.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-51-d","_parentId":"b-66","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task D: Warfare - the shooting videogame","displayTitle":"Task D: Warfare - the shooting videogame","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T6ExD.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-52","_parentId":"b-75","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Tutorial 7","displayTitle":"Tutorial 7: Recursive functions and Matrices","body":"<iframe width = '100%' height = '550' src=course/en/pdf/t7.pdf> </iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-52-a","_parentId":"b-76","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task A: Recursive function - Fibonacci sequence","displayTitle":"Task A: Recursive function - Fibonacci sequence","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T7ExA.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-52-b","_parentId":"b-76","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task B: Defining matrices","displayTitle":"Task B: Defining matrices","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T7ExB.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-52-c","_parentId":"b-76","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task C: Patterns - the Scottish flag","displayTitle":"Task C: Patterns - the Scottish flag","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T7ExC.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-52-d","_parentId":"b-76","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task D: Matrix Operations - Sum of two matrices","displayTitle":"Task D: Matrix Operations - Sum of two matrices","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T7ExD.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-53","_parentId":"b-80","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Tutorial 8","displayTitle":"Tutorial 8: Matrices","body":"<iframe width = '100%' height = '550' src=course/en/pdf/t8.pdf> </iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-53-a","_parentId":"b-81","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task A: Matrix-vector multiplications","displayTitle":"Task A: Matrix-vector multiplications","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T8ExA.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-53-b","_parentId":"b-81","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task B: Patterns","displayTitle":"Task B: Patterns","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T8ExB.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-53-c","_parentId":"b-81","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task C: Playing chess","displayTitle":"Task C: Playing chess","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T8ExC.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-53-d","_parentId":"b-81","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task D: Transpose of a matrix","displayTitle":"Task D: Transpose of a matrix","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T8ExD.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-54","_parentId":"b-85","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Tutorial 9","displayTitle":"Tutorial 9: Consolidation","body":"<iframe width = '100%' height = '550' src=course/en/pdf/t9.pdf> </iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-54-a","_parentId":"b-86","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task A: Trace of a matrix","displayTitle":"Task A: Trace of a matrix","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T9ExA.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-54-b","_parentId":"b-86","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task B: Matrix-matrix multiplication","displayTitle":"Task B: Matrix-matrix multiplication","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T9ExB.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-54-c","_parentId":"b-86","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task C: Anagrams","displayTitle":"Task C: Anagrams","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T9ExC.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-54-d","_parentId":"b-86","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task D: Experimental analysis","displayTitle":"Task D: Experimental analysis","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T9ExD.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-54-e","_parentId":"b-86","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task E: The Pirates treasure map - path searching","displayTitle":"Task E: The Pirates treasure map - path searchin","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T9ExE.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-54-f","_parentId":"b-86","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Task F: The Towers of Hanoi","displayTitle":"Task F: The Towers of Hanoi","body":"It is recommended that you use the terminal below to solve this task. <br> <br> <iframe width = '100%' height = '400' src=https://trinket.io/embed/python/3e1f903aa5?toggleCode=true&runOption=></iframe>","instruction":"Please don't forget to save your solution somewhere handy using the name 'T9ExF.py'...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-55","_parentId":"b-90","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Extra","displayTitle":"Extra Exercises","body":"<iframe width = '100%' height = '550' src=course/en/pdf/t9.pdf> </iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-140","_parentId":"b-95","_type":"component","_component":"mcq","_classes":"assessment","_layout":"left","_attempts":1,"_questionWeight":1,"_canShowModelAnswer":false,"_shouldDisplayAttempts":false,"_isRandom":true,"_selectable":4,"title":"Control the scroll","displayTitle":"Control the scroll","body":"The <strong>Trickle</strong> extension makes it possible to control how the learner scrolls down the page, but what elements of a page can it be applied to?","instruction":"Choose an option and select Submit.","_items":[{"text":"Article","_shouldBeSelected":true},{"text":"Block","_shouldBeSelected":true},{"text":"Component","_shouldBeSelected":false},{"text":"Other extensions","_shouldBeSelected":false}],"_feedback":{"title":"","correct":"","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-145","_parentId":"b-95","_type":"component","_component":"graphic","_classes":"","_layout":"right","_isOptional":true,"title":"c-95","displayTitle":"","body":"","instruction":"","_graphic":{"src":"course/en/images/single-width.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-147","_parentId":"b-100","_type":"component","_component":"text","_classes":"","_layout":"full","title":"Scoring bands","displayTitle":"","body":"The Assessment Results component allows you to specify the assessment pass mark, and provide tailored feedback to as many scoring bands as you wish.<br><br>In this short assessment we set the pass mark at 75% or above and provided four scoring bands, each of which has some accompanying feedback. The four scoring bands were:<br><br><ul><li>0-49% (fail)</li><li>50-74% (fail)</li><li>75-99% (pass)</li><li>100% (perfect score)</li></ul><br>So, how did you do? Let’s find out.","_canReset":true,"_isResetOnRevisit":"hard","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-150","_parentId":"b-105","_type":"component","_component":"assessmentResults","_classes":"","_layout":"full","_isVisibleBeforeCompletion":false,"_assessmentId":"a-15","title":"Results","displayTitle":"Results","body":"","instruction":"","_retry":{"button":"Retry Assessment","_comment":"use {{attempts}}, {{attemptsSpent}} and {{attemptsLeft}} to display attempts","feedback":""},"_comment":"use {{score}}, {{maxScore}} and {{scoreAsPercent}} to display score and percentage","_completionBody":"{{{feedback}}}","_bands":[{"_score":0,"feedback":"You didn’t pass, achieving a score of {{scoreAsPercent}}%.<br><br>You didn’t do so well in the Adapt assessment demo, but don’t worry. There’s lots of information about the Adapt basics on <a href='http://www.adaptlearning.org/' target='_blank'>our site</a>. We’d also suggest you pay a visit to <a href='https://community.adaptlearning.org/mod/forum/view.php?id=4' target='_blank'>the forum</a> or <a href='https://gitter.im/adaptlearning/adapt_framework'>chat room</a> and ask our ever-helpful community to answer any questions that you might have.","_allowRetry":true},{"_score":50,"feedback":"You didn’t pass, achieving a score of {{scoreAsPercent}}%.<br><br>You already know some of the Adapt basics but please explore <a href='http://www.adaptlearning.org/' target='_blank'>our site</a> for more information. Also pay a visit to <a href='https://community.adaptlearning.org/mod/forum/view.php?id=4' target='_blank'>the forum</a> or <a href='https://gitter.im/adaptlearning/adapt_framework'>chat room</a> and ask our ever-helpful community to answer any questions that you might have.","_allowRetry":true},{"_score":75,"feedback":"You passed, achieving a score of {{scoreAsPercent}}%.<br><br>You’re clearly already pretty knowledgeable about Adapt so, if you haven’t already, please consider sharing your expertise on the <a href='https://community.adaptlearning.org/mod/forum/view.php?id=4' target='_blank'>Adapt community forums</a>.","_allowRetry":true},{"_score":100,"feedback":"You passed, achieving a score of {{scoreAsPercent}}%.<br><br>You’re clearly already a black belt in Adapt! If you haven’t already, please consider sharing your expertise on the <a href='https://community.adaptlearning.org/mod/forum/view.php?id=4' target='_blank'>Adapt community forums</a>.","_allowRetry":false}],"_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-155","_parentId":"b-110","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"Introduction","displayTitle":"","body":"<iframe width = '100%' height = '356' src=https://trinket.io/embed/python/43bc79b582?runOption=></iframe> <br> <br><iframe width = '100%' height = '356' src=https://trinket.io/embed/python3/2696504f5d?runOption=></iframe>","instruction":"{{_globals._learnerInfo.firstname}}, scroll down to see what presentation components are available as part of the core bundle.","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-160","_parentId":"b-115","_type":"component","_component":"expose","_classes":"","_layout":"full","title":"Variable management","displayTitle":"Variable management","body":"","instruction":"Click each flashcard to display the content underneath. Clicking again will restore the item to its original state.","_columns":2,"_animationType":"flipUp","_items":[{"front":"Identifier","back":{"title":"","body":"Variables have names, also known as identifiers <br> Variable names can be as long as you like and may include letters and numbers, but cannot start with numbers"}},{"front":"Increment/Decrement","back":{"title":"","body":"Incrementing is a particular type of assignment that increases the value of a variable by an increment (i.e. 1) <br> Decrementing is a similar assignment that would decrease the value by the same amount"}}]},{"_id":"c-161","_parentId":"b-115","_type":"component","_component":"expose","_classes":"","_layout":"full","title":"Statements and Assignments","displayTitle":"<br>Statements and Assignments<br>","body":"","instruction":"","_columns":2,"_animationType":"shrink","_items":[{"front":"Statement","back":{"title":"","body":"A statement is a command line that causes an effect. <br> Statements are read and executed by the interpreter Python"}},{"front":"Assignment","back":{"title":"","body":"An important statement is the assignment. <br> An assignment sets the value of a variable. <br> A value is then put into a container named by an identifier"}}]},{"_id":"c-162","_parentId":"b-115","_type":"component","_component":"expose","_classes":"","_layout":"full","title":"Type & Conversion","displayTitle":"<br>Type & Conversion<br>","body":"","instruction":"","_columns":2,"_animationType":"slideUp","_items":[{"front":"Type","back":{"title":"","body":"It is often useful to check the type of a variable. This can be done with the command <b>type()</b>"}},{"front":"Conversion","back":{"title":"","body":"Type conversion is the process of converting the value of one data type (real, integer, string) to another data type"}}]},{"_id":"c-163","_parentId":"b-115","_type":"component","_component":"expose","_classes":"","_layout":"full","title":"Data management","displayTitle":"<br>Data management<br>","body":"","instruction":"","_columns":2,"_animationType":"slideUp","_items":[{"front":"Lists","back":{"title":"","body":"A list is a sequence of data <br> Each element within the list can be identified by the name of the list and by the position of the cell within the list, through the braket operator <b>[]</b>"}},{"front":"Tuples","back":{"title":"","body":"A <b>tuple</b>, very much like a <b>list</b>, is a sequence of elements<br> The very first difference to point out is that <b>lists</b> are <b>mutable</b> while <b>tuples</b> are <b>immutable</b> <br> Tuples are created with comma-separated list of values in brakets <b>()</b>"}},{"front":"Ranges and subsets","back":{"title":"","body":"A list of N elements has valid indices in the range 0 to <b>N-1</b> <br> The operator <b>[n:p]</b> identifies the segment of the list from the n-th element to the p-th element, including the first but excluding the last."}},{"front":"Strings","back":{"title":"","body":"A <b>string</b> is a sequence of characters, and, as such, it can be seen and treated as a <b>list</b> <br> Slicing applies to <b>strings</b> too <br> <b>Strings</b> can also be concatenated as lists <br> <b>In Python, strings are immutable, as they cannot be altered</b>"}},{"front":"Libraries","back":{"title":"","body":"There are many predefined built in functions that are useful to perform specific operations <br> These functions are grouped and collected in special libraries, also called modules <br> Popular libraries are <b>math</b>, <b>numpy</b>, <b>matplotlib.pyplot</b>"}},{"front":"Matrices","back":{"title":"","body":"One of the most obvious representation of a matrix in Computing is through a list of lists <br> Every sublist represents a row of the matrix, whilst the collection of all the sublist (rows) will consitute the overall matrix <br> In order to visualise the list of lists in the commonplace matrix format, it is convenient to plot the variable line by line"}}]},{"_id":"c-164","_parentId":"b-115","_type":"component","_component":"expose","_classes":"","_layout":"full","title":"","displayTitle":"","body":"","instruction":"","_columns":2,"_animationType":"slideUp","_items":[{"front":"Input/Output","back":{"title":"","body":"There are two broad categories of exchanging (inputting/outputting) data with/from a machine: <b>Direct</b> and from <b>Storage Units</b> <br> The most common Direct Input is through the keyboard <br> It is recommended to prompt the user with a message, to remind them what type of data is expected"}},{"front":"Conditional statements","back":{"title":"","body":"Whenever the execution of some statements depends upon the verification of a specific condition, the <b>if</b> operator is used <br> Boolean conditions can be stated with Boolean logical operators <br> It is thus necessary to reformulate any enquire that considers more than 2 options, using boolean statements"}},{"front":"Counted loops","back":{"title":"","body":"The <b>for</b> loop can be used every time we wish to repeat a set of statements <br> A variable known as <b>counter</b> is used to keep track of the number of iterations performed <br> It is thus necessary to set the range of counting beforehand<br>The counting does not necesearilly need to be performed in unitary steps/forwards"}},{"front":"Conditional loops","back":{"title":"","body":"Loops subject to a condition are known as <b>Conditional Loops</b> <br> These are implemented with the <b>while</b> loop statement <br> Initialisation is needed for the <b>counter</b> variable, otherwise the condition cannot be verified the first time, on entering the loop<br><b>The counter is not incremented automatically</b>"}},{"front":"Functions","back":{"title":"","body":"Every function is a stand alone entity, that remains in stand-by until it is invoked<br> To invoke a function, i.e. to activate and execute it, we need to <b>call</b>/invoke it <br> Any function, when invoked, needs to have been already defined <b>before</b> <br> A function is invoked by writing its name/identifier at the point of the script where we wish the function should start performing <br> When a function is called, the script hands over the control of the flow to the function"}},{"front":"Arguments","back":{"title":"","body":"Functions need to receive some values or data from the caller in order to analyse/process information<br> Every time a function needs some values these are called <b>input arguments</b><br>In the same way as a function can have input arguments, it may have <b>output arguments</b><br> If a function needs to return more than one variable, the output arguments can be put in the form of a <b>tuple</b>"}}]},{"_id":"c-170","_parentId":"b-120","_type":"component","_component":"text","_classes":"","_layout":"full","title":"Introduction","displayTitle":"","body":"A list is a sequence of data. If multiple data, often of the same type, have to be analysed and computed, it is convenient to store them in a common variable, rather than having many individual variables. For example, if we wish to store all the names of ME1 students in Mech Eng, we could use many variables of type <b>String</b>, each containing the name of a single student.","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-171","_parentId":"b-120","_type":"component","_component":"text","_classes":"","_layout":"left","title":"","displayTitle":"","body":"However, to store the name of all the students we would need 160 different variables, identified by 160 identifiers. This is already clumsy for such a small number of students, and it would be unthinkable if we wish to store the names of all the people living in London, i.e. 7 millions variables. Since all the variables containing the name of students are of the same type, namely Strings, it would be more convenient to collect all the names in a sequential list and provide only one identifier for the list.","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-172","_parentId":"b-120","_type":"component","_component":"graphic","_classes":"","_layout":"right","_isOptional":true,"title":"c-172","displayTitle":"","body":"","instruction":"","_graphic":{"large":"course/en/images/ch2-p1.png","small":"course/en/images/ch2-p1.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-173","_parentId":"b-120","_type":"component","_component":"text","_classes":"","_layout":"full","title":"","displayTitle":"","body":"There are several ways of creating a new list in Python; the simplest is by enclosing its components in square brakets. The following example defines a list, with identifier BrightStudents, containing the names of five students. By printing the variable and by enquirying its type, we could visualise the elements of the sequence and verify that the variable is of a new type, namely List.","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-174","_parentId":"b-120","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"","displayTitle":"","body":"<iframe width = '100%' height = '200' src=https://trinket.io/embed/python/772122e864?toggleCode=true&runOption=></iframe>","instruction":"The list thus has a single identifier, the name of the variable, and is formed by many elements or cells. Each element within the list can be identified by the name of the list and by the position of the cell within the list, through the braket operator.","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-175","_parentId":"b-120","_type":"component","_component":"graphic","_classes":"","_layout":"left","title":"","displayTitle":"","body":"<iframe width = '100%' height = '250' src=https://trinket.io/embed/python/565e6b5d07?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-176","_parentId":"b-120","_component":"textinput","_classes":"","_isOptional":false,"_isAvailable":true,"_isHidden":false,"_isVisible":true,"_isResetOnRevisit":"false","_ariaLevel":0,"_disableAccessibilityState":false,"title":"","displayTitle":"","body":"How would you amend the code on the left hand side if you wanted to identify Emy?","_type":"component","_layout":"left","_onScreen":{"_isEnabled":false,"_classes":"","_percentInviewVertical":50},"instruction":"Enter the index value that you would put in the brackets of the commented line...","_items":[{"_answers":["4"],"prefix":"","suffix":"","placeholder":"Enter an integer between 0 and 5..."}],"_feedback":{"title":"List indices","correct":"Spot on! There are 5 elements in the list, but the count starts from 0...","_incorrect":{"final":"That's not correct, please note that the first element has the index 0..."}},"_attempts":2,"_canShowModelAnswer":true,"_canShowFeedback":true,"_canShowMarking":true,"_shouldDisplayAttempts":false,"_isRandom":false,"_recordInteraction":true,"_questionWeight":1,"_allowsAnyCase":false,"_allowsPunctuation":false,"_buttons":{"_submit":{"buttonText":"","ariaLabel":""},"_reset":{"buttonText":"","ariaLabel":""},"_showCorrectAnswer":{"buttonText":"","ariaLabel":""},"_hideCorrectAnswer":{"buttonText":"","ariaLabel":""},"_showFeedback":{"buttonText":"","ariaLabel":""},"remainingAttemptsText":"","remainingAttemptText":""}},{"_id":"c-180","_parentId":"b-125","_type":"component","_component":"text","_classes":"","_layout":"left","title":"List indexing","displayTitle":"Indexing a list","body":"You would have noticed by now that the first index, i.e. the position of the first element is zero and not 1. This, although counterintuitive, may be digested and remembered by considering the index as measure of the offset from the beginning of the list. With this insight, the offset of the first element is hence zero.","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-181","_parentId":"b-125","_type":"component","_component":"graphic","_classes":"","_layout":"right","_isOptional":true,"title":"c-181","displayTitle":"","body":"","_graphic":{"large":"course/en/images/ch2-p3.png","small":"course/en/images/ch2-p3.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-182","_parentId":"b-125","_type":"component","_component":"graphic","_classes":"","_layout":"left","title":"","displayTitle":"","body":"<iframe width = '100%' height = '250' src=https://trinket.io/embed/python/902381a4b3?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-183","_parentId":"b-125","_type":"component","_component":"text","_classes":"","_layout":"right","title":"","displayTitle":"","body":"If we exceed the dimensions of a list, we will incurr in a error, as pictured on the left hand side. This is because we are trying to look at an element that does not exist. Hence, we could generalise saying that a list of N elements has valid indices in the range <b>0</b> to <b>N-1</b>. <br>If we wish to know the length of a list we could enquire it with the command <b>len</b>...","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false},"instruction":"Don't forget to comment/amend the lines 4-5 concerned with illustrating the errors thrown by exceeding the dimnension of the list"},{"_id":"c-184","_parentId":"b-125","_type":"component","_component":"text","_classes":"","_layout":"left","title":"","displayTitle":"","body":"Indices can also have negative values. This counterintuitive way of indexing can be thought as the index being the offset from the end.","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-185","_parentId":"b-125","_type":"component","_component":"graphic","_classes":"","_layout":"right","_isOptional":true,"title":"c-184","displayTitle":"","body":"","_graphic":{"large":"course/en/images/ch2-p4.png","small":"course/en/images/ch2-p4.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-186","_parentId":"b-125","_type":"component","_component":"graphic","_classes":"","_layout":"full","title":"","displayTitle":"","body":"<iframe width = '100%' height = '250' src=https://trinket.io/embed/python/c840a43488?toggleCode=true&runOption=></iframe>","instruction":"Note that this time the range allowed is <b> -1 </b> to <b> -N </b>, where N is the length of the list...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-187","_parentId":"b-125","_type":"component","_component":"mcq","_classes":"","_layout":"left","_attempts":2,"_questionWeight":1,"_canShowModelAnswer":false,"_shouldDisplayAttempts":false,"_isRandom":true,"_selectable":1,"title":"","displayTitle":"","body":"Which of the following values should be assigned to variable <b> i </b> in line 3 to result in two identical outputs?","instruction":"Choose the right option and select Submit.","_items":[{"text":"2","_shouldBeSelected":true},{"text":"1","_shouldBeSelected":false},{"text":"3","_shouldBeSelected":false},{"text":"4","_shouldBeSelected":false}],"_feedback":{"title":"Indexing a list","correct":"Spot on! Both BrightStudents[2] and BrighStudents[-3] are equal to 'Jayant'","_incorrect":{"final":"That's just wrong, maybe have another go and try to solve the equation 2i-7 = -(i+1)..."}},"_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-188","_parentId":"b-125","_type":"component","_component":"graphic","_classes":"","_layout":"right","title":"","displayTitle":"","body":"<iframe width = '100%' height = '320' src=https://trinket.io/embed/python/998ae1d530?toggleCode=true&runOption=></iframe>","instruction":"Note that indices can also be represented by integer variables...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-190","_parentId":"b-130","_type":"component","_component":"text","_classes":"","_layout":"left","title":"Operations on lists","displayTitle":"Lists operations","body":"Values in a list can be altered through assignments. In this example we alter the second name Polly with Pauline. Of course, the assignment will force any previous value, i.e. Polly, in the cell being lost. <br> Note that assigning values to non existing elements of the list, i.e. at indices out of the range, will produce and error. The following example does not add / append an extra, fourth, name to the list, but will result in an error instead. <br> It is equally possible to append more values at the same time, essentially appending two lists together.","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-191","_parentId":"b-130","_type":"component","_component":"graphic","_classes":"","_layout":"right","title":"","displayTitle":"","body":"<iframe width = '100%' height = '320' src=https://trinket.io/embed/python/bdaa27d6ae?toggleCode=true&runOption=></iframe>","instruction":"In order to append new values to the list, these have to be concatenated to the existing list... <br> Don't forget to comment line 6 to eliminate any error","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-192","_parentId":"b-130","_type":"component","_component":"graphic","_classes":"","_layout":"left","title":"","displayTitle":"","body":"<iframe width = '100%' height = '320' src=https://trinket.io/embed/python/716b3a31c0?toggleCode=true&runOption=></iframe>","instruction":"Note that the above mathematical operators, apart from <b>+</b>, would not mean anything if applied between whole lists...","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-193","_parentId":"b-130","_type":"component","_component":"text","_classes":"","_layout":"left","title":"","displayTitle":"","body":"Note that the <b>+</b> operator between lists acts as a concatenation operator and not as a mathematical sum. However, if we operate between elements of a list, the <b>+</b> operator will act as a mathematical sum. <br> However, the <b>*</b> operator can be used on lists as the repetition operator, i.e. a list is repeated as many integer time as prescribed.<br> <iframe width = '100%' height = '220' src=https://trinket.io/embed/python/0707951c36?toggleCode=true&runOption=></iframe>","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-200","_parentId":"b-135","_type":"component","_component":"graphic","_classes":"","_layout":"left","_isOptional":true,"title":"c-200","displayTitle":"List slicing","body":"It is possible to select subsets or segments of a list. The operator <b>[n:p]</b> identifies the segment of the list from the n-th element to the p-th element, including the first but excluding the last.","_graphic":{"large":"course/en/images/ch2-p5.png","small":"course/en/images/ch2-p5.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-201","_parentId":"b-135","_type":"component","_component":"graphic","_classes":"","_layout":"left","title":"","displayTitle":"","body":"<iframe width = '100%' height = '480' src=https://trinket.io/embed/python/408c93594e?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-202","_parentId":"b-135","_type":"component","_component":"mcq","_classes":"","_layout":"full","_attempts":2,"_questionWeight":1,"_canShowModelAnswer":false,"_shouldDisplayAttempts":false,"_isRandom":true,"_selectable":1,"title":"","displayTitle":"","body":"What is the length of the list <b>Sub5</b> defined in Line 17?","instruction":"Choose the right option and select Submit.","_items":[{"text":"11","_shouldBeSelected":true},{"text":"10","_shouldBeSelected":false},{"text":"12","_shouldBeSelected":false},{"text":"Elephant","_shouldBeSelected":false}],"_feedback":{"title":"Indexing a list","correct":"Spot on! By not specifying any ends of the range, the 'slicing' will take the whole range...","_incorrect":{"final":"That's just wrong, maybe have another go and consider what are the ends of the range..."}},"_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-203","_parentId":"b-140","_type":"component","_component":"text","_classes":"","_layout":"left","title":"Strings","displayTitle":"Strings","body":"A String is a sequence of characters, and, as such, it can be seen and treated as a List. Single letters of the string can be selected the same way as selecting single elements in a list. <br><br> Slicing applies to Strings too... <br> <br><iframe width = '100%' height = '320' src=https://trinket.io/embed/python/a5631ea586?toggleCode=true&runOption=></iframe> <br>Strings can also be concatenated as lists: <br> <br><iframe width = '100%' height = '220' src=https://trinket.io/embed/python/cfc2ed2c34?toggleCode=true&runOption=></iframe>","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-204","_parentId":"b-140","_type":"component","_component":"text","_classes":"","_layout":"right","title":"Immutable objects","displayTitle":"Immutable objects","body":"However, there is an important difference between Lists and Strings: the single elements of a String cannot be altered, whilst we can alter single elements of a List. This difference between Strings and Lists leads to a new concept in Computing: <b>MUTABLE</b> and <b>IMMUTABLE</b> objects. <br> <br><iframe width = '100%' height = '520' src=https://trinket.io/embed/python/35e29bec3d?toggleCode=true&runOption=></iframe>","instruction":"In Python: Lists are mutable, as they can be altered. Strings are immutable, as they cannot be altered.","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-210","_parentId":"b-145","_type":"component","_component":"text","_classes":"","_layout":"left","title":"Aliasing","displayTitle":"Aliasing","body":"When creating a list we are creating an object in the machine, i.e. there will be some physical space allocated in the memory within the machine. The name/identifier of a list refers to this physical space where the values are stored in a sequence. This association of a variable (of type List) with an object is also known as reference.","instruction":"If a variable a refers to a list (an object), the assignment <b>b</b> = <b>a</b> will create another reference to the same objects (List).","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-211","_parentId":"b-145","_type":"component","_component":"graphic","_classes":"","_layout":"right","_isOptional":true,"title":"c-211","displayTitle":"","body":"<br>","_graphic":{"large":"course/en/images/ch2-p6.png","small":"course/en/images/ch2-p6.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-212","_parentId":"b-145","_type":"component","_component":"graphic","_classes":"","_layout":"left","_isOptional":true,"title":"c-212","displayTitle":"","body":"<br>","_graphic":{"large":"course/en/images/ch2-p7.png","small":"course/en/images/ch2-p7.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-213","_parentId":"b-145","_type":"component","_component":"text","_classes":"","_layout":"right","title":"","displayTitle":"","body":"<b>a</b> and <b>b</b> refers to the same object, i.e. to the same list in the machine. This operation is also known as <b>aliasing</b>. If we change one element of the list, by either referencing it through <b>a</b> or <b>b</b>, the change will reflect in the physical object, irrespectively of the aliasing.<br> <iframe width = '100%' height = '300' src=https://trinket.io/embed/python/1e9cd95c42?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-214","_parentId":"b-145","_type":"component","_component":"text","_classes":"","_layout":"full","title":"","displayTitle":"","body":"Aliasing can be performed for any objects, including Strings. However, the changes are only possible for <b>mutable objects</b>, such as Lists and not Strings.<br> Aliasing can be very <b>error-prone</b> as it is easy to forget that change made with one identifier are reflected when using another aliasing identifier. <br><iframe width = '100%' height = '300' src=https://trinket.io/embed/python/cd3c80ca04?toggleCode=true&runOption=></iframe>","instruction":"As general rule of thumb: avoid aliasing!!","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-220","_parentId":"b-150","_type":"component","_component":"text","_classes":"","_layout":"left","title":"","displayTitle":"Loops<br>Traversing a List","body":"If we wish to scroll all the elements of a list, from the beginning to the end, we can use the For loop. By doing so we are traversing all the elements in a List sequentially. Let's create a list with the names of all the British Royals. If we wish to print out all of them, we would need a cumbersome sequence of printing commands.","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-221","_parentId":"b-150","_type":"component","_component":"graphic","_classes":"","_layout":"right","title":"","displayTitle":"","body":"<iframe width = '100%' height = '300' src=https://trinket.io/embed/python/ed79d83152?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-222","_parentId":"b-150","_type":"component","_component":"text","_classes":"","_layout":"full","title":"","displayTitle":"","body":"Obviously this is tedious and impractical if the list is made of thousands or millions of elements (i.e. the names of all British citizens). It would be more practical to scroll the sequence automatically and at every occurrence print out the name. <br> <br><iframe width = '100%' height = '200' src=https://trinket.io/embed/python/a55ce0a4a4?toggleCode=true&runOption=></iframe>","instruction":"The command <b>for</b> traverses the entire list, and for every occurrence perform a specific task, namely of printing the current element of the list being traversed.","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-223","_parentId":"b-150","_type":"component","_component":"text","_classes":"","_layout":"left","title":"","displayTitle":"","body":"This works fine if we only need to identify and read the values of a list. If, instead, we wish to change the elements, we would need to know the indices, in order to perform assigments. Let's define a list of integer numbers. We would like to double all these values. One, unpractical way would be to traverse the list manually: <br> <br> <iframe width = '100%' height = '300' src=https://trinket.io/embed/python/e25614ac1a?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-224","_parentId":"b-150","_type":"component","_component":"text","_classes":"","_layout":"right","title":"","displayTitle":"","body":"If we wish to perform this function automatically, we would need to handle the index to identify the various positions in the sequence. The index will range from 0 to N-1, where N is the length of the list. <br> <br> <iframe width = '100%' height = '350' src=https://trinket.io/embed/python/7cc72cb2d3?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-225","_parentId":"b-150","_type":"component","_component":"text","_classes":"","_layout":"left","title":"","displayTitle":"Index range","body":"If we wish to double only the elements in the list occupying odd positions, we could define a range containing odd positions only, and then traverse this reduced range.","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-226","_parentId":"b-150","_type":"component","_component":"graphic","_classes":"","_layout":"right","_isOptional":true,"title":"c-226","displayTitle":"","body":"<br>","_graphic":{"large":"course/en/images/ch2-p8.png","small":"course/en/images/ch2-p8.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-227","_parentId":"b-150","_type":"component","_component":"graphic","_classes":"","_layout":"left","title":"","displayTitle":"","body":"<iframe width = '100%' height = '260' src=https://trinket.io/embed/python/8ebc9e0212?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-228","_parentId":"b-150","_type":"component","_component":"graphic","_classes":"","_layout":"right","title":"","displayTitle":"","body":"<iframe width = '100%' height = '260' src=https://trinket.io/embed/python/1853761dd7?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-229","_parentId":"b-150","_component":"textinput","_classes":"","_isOptional":false,"_isAvailable":true,"_isHidden":false,"_isVisible":true,"_isResetOnRevisit":"false","_ariaLevel":0,"_disableAccessibilityState":false,"title":"","displayTitle":"","body":"What would be the value needed in line 8 on the right hand side in order to define a range that would virtually perform the same task as above?","_type":"component","_layout":"left","_onScreen":{"_isEnabled":false,"_classes":"","_percentInviewVertical":50},"instruction":"","_items":[{"_answers":["-1"],"prefix":"","suffix":"","placeholder":"Enter an integer value (potentially with its sign)"}],"_feedback":{"title":"Index range","correct":"Spot on! The list is run backwardly even though negative offsets are in use...","_incorrect":{"final":"That's just wrong, maybe have another go... Please note the difference between negative and positive offsets"}},"_attempts":2,"_canShowModelAnswer":true,"_canShowFeedback":true,"_canShowMarking":true,"_shouldDisplayAttempts":false,"_isRandom":false,"_recordInteraction":true,"_questionWeight":1,"_allowsAnyCase":false,"_allowsPunctuation":true,"_buttons":{"_submit":{"buttonText":"","ariaLabel":""},"_reset":{"buttonText":"","ariaLabel":""},"_showCorrectAnswer":{"buttonText":"","ariaLabel":""},"_hideCorrectAnswer":{"buttonText":"","ariaLabel":""},"_showFeedback":{"buttonText":"","ariaLabel":""},"remainingAttemptsText":"","remainingAttemptText":""}},{"_id":"c-2295","_parentId":"b-150","_type":"component","_component":"graphic","_classes":"","_layout":"right","title":"","displayTitle":"","body":"<iframe width = '100%' height = '260' src=https://trinket.io/embed/python/df416addfc?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-230","_parentId":"b-155","_type":"component","_component":"text","_classes":"","_layout":"left","title":"","displayTitle":"Generating a list","body":"If we wish to generate a list incrementally, by forming/adding one element at the time, we need to consider the process of concatenating the exisiting list with another element (defined as a singleton list). To better understand the concept: let's generate a list A of integer numbers from 0 to 100. ","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-231","_parentId":"b-155","_type":"component","_component":"graphic","_classes":"","_layout":"right","title":"","displayTitle":"","body":"<iframe width = '100%' height = '240' src=https://trinket.io/embed/python/6beaf8f171?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-240","_parentId":"b-160","_type":"component","_component":"text","_classes":"","_layout":"left","title":"","displayTitle":"Libraries in Python","body":"There are many predefined built in functions in Python that are useful to perform mathematical or graphical operations. These many functions are grouped and collected in special libraries called also modules. Popular libraries are <b>math</b>, <b>numpy</b>, <b>matplotlib.pyplot</b>. Before using any function it is necessary to load/import the library (module) into the machine. After loading the library, any function within the library can be invoked by specifying the name of the library and indicating the function needed.","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-241","_parentId":"b-160","_type":"component","_component":"graphic","_classes":"","_layout":"right","title":"","displayTitle":"","body":"<iframe width = '100%' height = '300' src=https://trinket.io/embed/python/fcd412b5e3?toggleCode=true&runOption=></iframe>","instruction":"It is possible to create an alias with a short name, and use the short name instead.","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-242","_parentId":"b-160","_type":"component","_component":"accordion","_classes":"","_layout":"full","title":"Lecture summary","displayTitle":"This lecture at a glance","body":"To summarise today's efforts, you should now be familiar with the concept of <b>lists</b> and their navigation using <b>loops</b>, be familiar with simple <b>math</b> functions and last but not least, be able to use basic <b>plotting functions</b>. Moreover, you would ideally tell the difference between <b>mutable</b> and <b>immutable</b> objects","instruction":"Select the headings to find out more.","_items":[{"title":"Lists","body":"<ul> <li>A list is a sequence of data</li> <li>There are several ways of creating a new list in Python </li> <li>The simplest is by enclosing its components in square brakets</li> <li>Each element within the list can be identified by the name of the list and by the position of the cell within the list, through the braket operator</li> <li> A list of N elements has valid indices in the range <b>0</b> to <b>N-1</b> </li> <li>It is possible to select subsets or segments of a list. The operator <b>[n:p]</b> identifies the segment of the list from the n-th element to the p-th element, including the first but excluding the last. </li> </ul>","_classes":"align-image-left","_graphic":{"src":"course/en/images/ch2-p9.png","alt":"Placeholder graphic."}},{"title":"Strings & Objects","body":"<ul> <li>A String is a sequence of characters, and, as such, it can be seen and treated as a List</li> <li> Slicing applies to Strings too </li> <li> Strings can also be concatenated as lists </li> <li>However: the single elements of a String cannot be altered, whilst we can alter single elements of a List</li> <li> In Python: Lists are mutable, as they can be altered. Strings are immutable, as they cannot be altered.</li> </ul>"},{"title":"Libraries in Python","body":"<ul> <li>There are many predefined built in functions that are useful to perform specific operations </li> <li> These functions are grouped and collected in special libraries, also called modules </li> <li> Popular libraries are <b>math</b>, <b>numpy</b>, <b>matplotlib.pyplot</b> </li> </ul>"}],"_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":true}},{"_id":"c-250","_parentId":"b-165","_type":"component","_component":"text","_classes":"","_layout":"full","title":"Introduction","displayTitle":"","body":"Until now we have been interacting with the machine and writing statements in Python through the online envinroment Trinket. Every time we wished to write some statements or visualise the value of some variables, we had to run the code. There are other environments deemed interactive, like Jupyter notebook, where the interaction occurs through a command window; in this way we tell the machine what to do and it'll do it immediately. Beside the interactive modes (online or offline), one could write statements through <b>scripts</b>.","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-251","_parentId":"b-165","_type":"component","_component":"text","_classes":"","_layout":"left","title":"","displayTitle":"","body":"Scripts are independent, stand-alone codes, saved within files, that can be executed at any time in the future without the need of rewriting the statements. In script mode codes are, in sequence, edited with a text editor, saved into files (with extension .py) and run. Once saved as .py files, they can be re-run at any time; moreover, they can be also re-edited / amended at any future time. More importantly, these files can also be passed to and used by someone else.","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-252","_parentId":"b-165","_type":"component","_component":"graphic","_classes":"","_layout":"right","_isOptional":true,"title":"c-252","displayTitle":"","body":"","instruction":"The file can be saved executed and amended at any time, and equally shared easily","_graphic":{"large":"course/en/images/ch3-p1.png","small":"course/en/images/ch3-p1.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-253","_parentId":"b-165","_type":"component","_component":"graphic","_classes":"","_layout":"left","_isOptional":true,"title":"c-253","displayTitle":"","body":"","instruction":"The file can then be executed / run by invoking it in the command window","_graphic":{"large":"course/en/images/ch3-p2.png","small":"course/en/images/ch3-p2.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-254","_parentId":"b-165","_type":"component","_component":"text","_classes":"","_layout":"right","title":"","displayTitle":"","body":"Often, Editor, for writing the script, and Command window for running the script are presented together in Integrated Development Environments (IDE). There are different IDEs for Python. On Software Hub you can find Spider and Python Script, but there are many more available and of free use. For this course you can choose and use any IDE of your best convenience, as long as you are working with any Python version 3.X.X. Note that not all the IDEs install automatically all the libraries that we will be using in the course: some of these need to be installed manually. As a novelty for this year, the use of online development environments is advertised, but mainly for delivery purposes.","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-255","_parentId":"b-166","_type":"component","_component":"text","_classes":"","_layout":"left","title":"","displayTitle":"Commenting scripts","body":"When coding it is very helpful to add some notes / comments within the code, to facilitate reading it at future stages. Comments explain the code in human language and are invaluable to other programmers to help them to undertsand the code. In fact, they are helpful to you too, as they will remind you the logic you applied at the time of writing the code, and that may not be clear anymore at first glance later on. Line of comments are initiated with #. Anything after this symbol on the same line will be ignored by the machine and not executed.","instruction":"It is a good practice to start any script with a few lines of comments, explaining what the code is expected to do","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-256","_parentId":"b-166","_type":"component","_component":"graphic","_classes":"","_layout":"right","title":"","displayTitle":"","body":"<iframe width = '100%' height = '300' src=https://trinket.io/embed/python/e716b99a5c?toggleCode=true&runOption=></iframe>","instruction":"Comments are also useful when you want to debug your code!","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-257","_parentId":"b-167","_type":"component","_component":"text","_classes":"","_layout":"left","title":"","displayTitle":"Input","body":"There will not be any reason of Computing if we could not pass data to or retrieve data from a computer. If we only execute statements without retrieving any data we could not examine the results. It is therefore of importance being able to communicate with the machine and input data to be processed whilst outputting results. For this purpose, there are two broad categories of exchanging (inputting/outputting) data with a machine: Direct and from Storage Units.","instruction":"We have already experienced modes of Direct Output, by visualising values of variables on the screen with the command <b>print()</b>","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-258","_parentId":"b-167","_type":"component","_component":"graphic","_classes":"","_layout":"right","_isOptional":true,"title":"c-256","displayTitle":"","body":"","_graphic":{"large":"course/en/images/ch3-p4.png","small":"course/en/images/ch3-p4.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-259","_parentId":"b-167","_type":"component","_component":"text","_classes":"","_layout":"full","title":"","displayTitle":"","body":"The most common Direct Input is through the keyboard. To pass data to the machine, whilst a script is running, from the keyboard, we can use the command <b>input()</b>. <br> The command input will prompt the user to type some data into the keyboard. Such data is then read in by the computer and assigned to variable a. When inserting data we could also prompt the user with a message, to remind the user what type of data is being expected.<br> <br> <iframe width = '100%' height = '220' src=https://trinket.io/embed/python/05e4652e6f?toggleCode=true&runOption=></iframe>","instruction":"Important: note that anything typed into the keyboard is read by the computer as a <b>string</b>. Hence, even if we type a number, it will read it as string and the variable receiving the inputted data will be of type <b>string</b>.","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-260","_parentId":"b-168","_type":"component","_component":"text","_classes":"","_layout":"left","title":"Remainder of a division","displayTitle":"Remainder of a division","body":"There are two ways in Python to compute the remainder of a division, a divided by b: <ul> <li>Use the floor division <b>//</b></li> <li> Use directly the remainder (or modulus) operator <b>%</b> </li></ul> <br> <iframe width = '100%' height = '300' src=https://trinket.io/embed/python/0b923cecb1?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-261","_parentId":"b-168","_type":"component","_component":"text","_classes":"","_layout":"left","title":"Generating random numbers","displayTitle":"Generating random numbers","body":"The function <b>random</b> generates a random real number between 0 and 1.0, including 0 but excluding 1.0. This function is contained in the <b>library</b> random. <br> <br> <ul></ul> <iframe width = '100%' height = '340' src=https://trinket.io/embed/python/1a718d21ea?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-262","_parentId":"b-168","_type":"component","_component":"mcq","_classes":"","_layout":"left","_attempts":2,"_questionWeight":1,"_canShowModelAnswer":false,"_shouldDisplayAttempts":false,"_isRandom":true,"_selectable":1,"title":"","displayTitle":"","body":"If you wanted to completely rig the result of a dice thrown such as to give only 5s and 6s, what would be the pair (a,b) defined in line 3 on the right hand side?","instruction":"Choose right option and select Submit.","_items":[{"text":"2, 5","_shouldBeSelected":true},{"text":"5, 6","_shouldBeSelected":false},{"text":"6, 5","_shouldBeSelected":false},{"text":"You can't rig this!","_shouldBeSelected":false}],"_feedback":{"title":"Random variables","correct":"Spot on! Nothing would stop you from winning every backgammon tournament!","_incorrect":{"final":"That's just wrong, maybe have another go. Bear in mind that random.random gives a value below 1..."}},"_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-263","_parentId":"b-168","_type":"component","_component":"graphic","_classes":"","_layout":"right","title":"","displayTitle":"","body":"<iframe width = '100%' height = '420' src=https://trinket.io/embed/python/6e01a259c4?toggleCode=true&runOption=></iframe>","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-265","_parentId":"b-169","_type":"component","_component":"text","_classes":"","_layout":"left","title":"Counted Loops","displayTitle":"Counted Loops","body":"We have seen how to traverse lists by using the for loop operator. However, the <b>for</b> loop can be used, more in general, every time we wish to repeat a set of statements. If a player wishes to throw a dice N times, we could rewrite the same statement of throwing a dice N times, or use a for loop to repeat the same action N times. In order to ascertain how many time the action has been repeated, we need to count every occurrence of it. Every time we throw a dice we need to add one occurrence to our counting. In order to count, we would need a variable devoted to counting the number of repetition. This variable is usually known as the counter.","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-266","_parentId":"b-169","_type":"component","_component":"graphic","_classes":"","_layout":"right","_isOptional":true,"title":"c-266","displayTitle":"","body":"","_graphic":{"large":"course/en/images/ch3-p5.png","small":"course/en/images/ch3-p5.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-267","_parentId":"b-169","_type":"component","_component":"text","_classes":"","_layout":"full","title":"","displayTitle":"","body":"In addition of a counter, when repeating actions we need to know the intial and final counting, i.e. where we start counting from and up to which value. It is therefore necessary to set beforehand a range from the beginning to the end of the counting. <br> <br> <iframe width = '100%' height = '300' src=https://trinket.io/embed/python/3f2a555afb?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-268","_parentId":"b-169","_type":"component","_component":"graphic","_classes":"","_layout":"left","title":"","displayTitle":"","body":"<iframe width = '100%' height = '220' src=https://trinket.io/embed/python/99fbf1a618?toggleCode=true&runOption=></iframe>","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-269","_parentId":"b-169","_type":"component","_component":"text","_classes":"","_layout":"right","title":"","displayTitle":"","body":"The variable count in the above example will act as the counter and will keep counting within the specified range. Every time that the actions within the loop are repeated, count is automatically incremented, as dictated by the range. The counting does not necessarily need to be in unitary steps or forward. We could also count backwardly and with any integer step we wish or need. For example, one could count backwardly in unitary steps or upwardly in steps of 5, as portrayed on the left hand side.","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-270","_parentId":"b-170","_type":"component","_component":"text","_classes":"","_layout":"left","title":"Conditional statements","displayTitle":"Conditional statements","body":"It is very common place in coding that the execution of some actions and/or statements will depend upon the verification of specific conditions, prescribed by the code developer. For example, if two players P1 and P2 throw a dice each, the winner will depend of the player who has obtained the highest score. So, if we want to declare the winner, we need to verify which player has obtained the large score, and consequently declare either P1 or P2 as the winner. <br> Assessing who has obtained the highest score requires two steps: <ol> <li>Establishing a condition that would select either A or B as the winner </li> <li> Verifying the condition </li></ol>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-271","_parentId":"b-170","_type":"component","_component":"graphic","_classes":"","_layout":"right","_isOptional":true,"title":"c-271","displayTitle":"<br>","body":"","_graphic":{"large":"course/en/images/ch3-p6.png","small":"course/en/images/ch3-p6.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-272","_parentId":"b-170","_type":"component","_component":"graphic","_classes":"","_layout":"left","_isOptional":true,"title":"c-272","displayTitle":"<br> <br>","body":"","_graphic":{"large":"course/en/images/ch3-p7.png","small":"course/en/images/ch3-p7.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-273","_parentId":"b-170","_type":"component","_component":"text","_classes":"","_layout":"right","title":"","displayTitle":"","body":"So, for example, we could enquire if the dice of P1 has a higher score than the dice of P2. The condition would then be <i>Is score of P1 higher than score of P2?</i>. Upon verification of this condition, we can either declare P1 as the winner if the condition is <b>True</b>, or P2 as the winner if such condition is <b>False</b>. <br> In Python this is implemented with the <b>if</b> operator: <iframe width = '100%' height = '310' src=https://trinket.io/embed/python/8f87f79701?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-274","_parentId":"b-170","_type":"component","_component":"text","_classes":"","_layout":"full","title":"","displayTitle":"","body":"The expression after the <b>if</b> is the condition. Provided the condition is <b>True</b>, the first set of intendent statements will run, otherwise the second set of indented statements will be executed. The two possible set of statements are also known as branches. There is no limit on the number of statements that can be executed within each branch, but there must be at least one. Nevertheless, sometimes it may be convenient to have a branch with no statements, as a place keeper. In that case we can use the pass statement, that does nothing. To condition is of Boolean type, i.e. it has only two possibilities. Any Boolean conditions is either <b>True</b> or <b>False</b>, unambiguously, and there cannot be a third possible branch.","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-275","_parentId":"b-170","_type":"component","_component":"graphic","_classes":"","_layout":"left","_isOptional":true,"title":"c-275","displayTitle":"","body":"","_graphic":{"large":"course/en/images/ch3-p9.png","small":"course/en/images/ch3-p9.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-276","_parentId":"b-170","_type":"component","_component":"graphic","_classes":"","_layout":"right","title":"","displayTitle":"","body":"<iframe width = '100%' height = '220' src=https://trinket.io/embed/python/da7ebd9f7b?toggleCode=true&runOption=></iframe>","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-277","_parentId":"b-171","_type":"component","_component":"text","_classes":"","_layout":"left","title":"Boolean statements","displayTitle":"Boolean statements","body":"Boolean conditions can be stated with Boolean logical operators. The use of logical operators <b>and</b>, <b>or</b> and <b>not</b> will allow for complex compounded conditions. Example: assess if a number x is included within a range <b>[a,b]</b>. <br> <br> <iframe width = '100%' height = '220' src=https://trinket.io/embed/python/638947016f?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-278","_parentId":"b-171","_type":"component","_component":"graphic","_classes":"","_layout":"right","_isOptional":true,"title":"c-278","displayTitle":"<br> <br>","body":"","_graphic":{"large":"course/en/images/ch3-p10.png","small":"course/en/images/ch3-p10.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-279","_parentId":"b-171","_type":"component","_component":"text","_classes":"","_layout":"left","title":"Nested conditionals","displayTitle":"Nested conditionals","body":"In assessing the winner between the two dice players, we have not considered the case when the two throws are identical: in such case there is no winner and the match is a draw. Since, each Boolean condition can have only two branches, in order to consider the third option of the draw, we need to reformulate the enquire into Boolean statements.","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-280","_parentId":"b-171","_type":"component","_component":"graphic","_classes":"","_layout":"right","_isOptional":true,"title":"c-280","displayTitle":"","body":"<br>","_graphic":{"large":"course/en/images/ch3-p11.png","small":"course/en/images/ch3-p11.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-281","_parentId":"b-171","_type":"component","_component":"graphic","_classes":"","_layout":"left","_isOptional":true,"title":"c-281","displayTitle":"","body":"<br> <br>","_graphic":{"large":"course/en/images/ch3-p12.png","small":"course/en/images/ch3-p12.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-282","_parentId":"b-171","_type":"component","_component":"text","_classes":"","_layout":"right","title":"","displayTitle":"","body":"We could firstly enquire if there is a winner of whether the match is a draw. Once establised that there is a winner, we could enquire, similarly to what done before, which of the two players has obtained the highest score and declare the winner. To implement such logical conditions we need to nest an if statement within another if statement, as potrayed on the left. <iframe width = '100%' height = '280' src=https://trinket.io/embed/python/cbafb58026?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-283","_parentId":"b-172","_type":"component","_component":"text","_classes":"","_layout":"left","title":"Common statements in branches","displayTitle":"Common statements in branches","body":"Let us create a list of 12 elements, containing the number of days for each month of the current year calendar. The set of statements to create the list is straightfoward, except for the month of February, for which we would need to evaluate if it is a leap year or not. <br> After assessing if February contains 28 or 29 days, we would continue assigning all the other days from March to December. Since the days in months March - December is irrespective of what is happening in February, it would be redundant to repeat them twice in both the two possible branches of the condition. By doing so we are writing twice as much the number of statements needed. It would be more sensible to extract out of the conditional construct any statement in common within the two branches.","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-284","_parentId":"b-172","_type":"component","_component":"graphic","_classes":"","_layout":"right","_isOptional":true,"title":"c-281","displayTitle":"<br> <br>","body":"","_graphic":{"large":"course/en/images/ch3-p13.png","small":"course/en/images/ch3-p13.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-285","_parentId":"b-172","_type":"component","_component":"accordion","_classes":"","_layout":"full","title":"Lecture summary","displayTitle":"This lecture at a glance","body":"To summarise today's efforts, you should now be familiar with the concepts of <b>input/output</b> and their basic <b>modes</b>, be confident in calculating <b>the remainder of devision</b>, generating <b>random numbers</b> and last but not least, be able to use <b>counted loops</b> and <b>conditional statements</b>.","instruction":"Select the headings to find out more.","_items":[{"title":"Input/Output","body":"<ul> <li>It is of importance to be able to communicate with the machine and input data to be processed whilst outputting results</li> <li>There are two broad categories of exchanging (inputting/outputting) data with/from a machine: Direct and from Storage Units </li> <li>The most common Direct Input is through the keyboard</li> <li>When inserting data we could also prompt the user with a message, to remind the user what type of data is being expected</li> </ul>"},{"title":"Counted Loops","body":"<br><ul> <li>The <b>for</b> loop can be used every time we wish to repeat a set of statements </li> <li> In order to ascertain how many time the action has been repeated, we need to count every occurrence of it </li> <li> This variable is usually known as the <b>counter</b> </li>  <li>It is also necessary to set beforehand a range from the beginning to the end of the counting</li> <li>The counting does not necessarily need to be in unitary steps nor forward</li> </ul>","_classes":"align-image-right","_graphic":{"src":"course/en/images/ch3-p50.png","alt":"Placeholder graphic."}},{"title":"Conditional statements","body":" <ul> <li>It is common place in coding that the execution of some actions and/or statements will depend upon the verification of specific conditions</li> <li> In Python this is implemented with the <b>if</b> operator </li> <li>Boolean conditions can be stated with Boolean logical operators</li> <li> Since, each Boolean condition can have only two branches, in order to consider a further option, we need to reformulate the enquire into Boolean statements </li><li>It is always sensible to extract  any common statement out of a conditional construct</li> </ul>","_classes":"align-image-left","_graphic":{"src":"course/en/images/ch3-p60.png","alt":"Placeholder graphic."}}],"_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":true}},{"_id":"c-290","_parentId":"b-180","_type":"component","_component":"text","_classes":"","_layout":"left","title":"","displayTitle":"","body":"In <b>Chapter 3</b> we have classified the ways of inputting/outputting data as Direct and Indirect. <b>Direct methods</b> implied communicating with the machine while the program is still running, whereas <b>Indirect methods</b> imply reading data from or storing data into permanent files. While the former is more interactive and very useful at early stages, the latter comes with the advantage that the data stored in files remain even after closing a session or switching the machine off and can be accessed, re-utilised and amended at any time in the future. As one would imagine, this is of importance when processing large chunks of data and producing graphs and plots.","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-291","_parentId":"b-180","_type":"component","_component":"graphic","_classes":"","_layout":"right","_isOptional":true,"title":"c-291","displayTitle":"","body":"","_graphic":{"large":"course/en/images/ch4-p1.png","small":"course/en/images/ch4-p1.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-292","_parentId":"b-180","_type":"component","_component":"text","_classes":"","_layout":"full","title":"Opening and closing files","displayTitle":"Opening and closing files","body":"Before accessing a file, either for reading or writing, it is necessary to open it to make it accessible. A file can be opened with the command <b>open()</b> and specifying in it the name of the file and the mode of access. The mode of access can either be for reading or for writing. The function <b>open()</b> opens the file and assign it to a specified variable. The file to be opened will be read from or witten into the current working folder. If the file has to be open and it is not present in the current working folder, an error will occur. If a file is opened in writing mode and it does not exist, it will be created. If, on the contrary, it exists already, it will be entirely replaced by a new one and any data contained in the older version will be <b>lost</b>. <br> <br> <iframe width = '100%' height = '200' src=https://trinket.io/embed/python3/e2e6f4fd99?toggleCode=true&runOption=></iframe>","instruction":"After using a file, either reading or writing, it is important to close it","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-293","_parentId":"b-181","_type":"component","_component":"text","_classes":"","_layout":"left","title":"Writing data into files","displayTitle":"Writing data into files","body":"With the current basic skills, we will be able to write string types data only. This means that we need to convert any other type of data into strings when writing them into files. To start with let's write the value contained in a numerical variable.","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-294","_parentId":"b-181","_type":"component","_component":"graphic","_classes":"","_layout":"right","title":"","displayTitle":"","body":"<iframe width = '100%' height = '200' src=https://trinket.io/embed/python3/ea358bb2f4?toggleCode=true&runOption=></iframe>","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-295","_parentId":"b-181","_type":"component","_component":"mcq","_classes":"","_layout":"full","_attempts":2,"_questionWeight":1,"_canShowModelAnswer":false,"_shouldDisplayAttempts":false,"_isRandom":true,"_selectable":1,"title":"","displayTitle":"","body":"Amend the code above to write in the same file the values of two variables, <b>(a,b)</b>=(2,5). What would be the output in <b>NewFile.txt</b>?","instruction":"Choose two options and select Submit.","_items":[{"text":"25","_shouldBeSelected":true},{"text":"2<br>5","_shouldBeSelected":false},{"text":"2, 5","_shouldBeSelected":false},{"text":"2","_shouldBeSelected":false}],"_feedback":{"title":"Writing into files","correct":"Spot on! Python keeps track of the last position saved in the file and position the next value immediately after it, with no space.","_incorrect":{"final":"That's just wrong, maybe have another go... Bear in mind that you simpy need to write the same command again for b = 5!"}},"_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-296","_parentId":"b-182","_type":"component","_component":"text","_classes":"","_layout":"left","title":"","displayTitle":"","body":"If we want to separate the two numbers into two different lines, at the end of the first line we have to make explicit that there will be a new line afterwards. New lines can be generated with the operator <b>endl</b> (more precisely, by concatenating the symbol <b>endl</b> to the string that we wish to save) <br> <br> <iframe width = '100%' height = '240' src=https://trinket.io/embed/python3/75711460ee?toggleCode=true&runOption=></iframe>","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-297","_parentId":"b-182","_type":"component","_component":"text","_classes":"","_layout":"right","title":"","displayTitle":"","body":"If we wish to store all the values of a list (say a list of Pronouns), each on a separate line, we could have <br> <br> <iframe width = '100%' height = '335' src=https://trinket.io/embed/python3/2b3d9654db?toggleCode=true&runOption=></iframe>","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-298","_parentId":"b-182","_component":"textinput","_classes":"","_isOptional":false,"_isAvailable":true,"_isHidden":false,"_isVisible":true,"_isResetOnRevisit":"false","_ariaLevel":0,"_disableAccessibilityState":false,"title":"","displayTitle":"","body":"What would be the output in <b>NewFile.txt</b> if you didn't specify the new line after each element? (As long as Pronouns problem is concerned)","_type":"component","_layout":"full","_onScreen":{"_isEnabled":false,"_classes":"","_percentInviewVertical":50},"instruction":"","_items":[{"_answers":["MeYouHeSheWeThey"],"prefix":"","suffix":"","placeholder":"Enter the output found in NewFile.txt (case and space sensitive!)"}],"_feedback":{"title":"Writing","correct":"Spot on! Spot on! Python keeps track of the last position saved in the file and position the next value immediately after it, with no space.","_incorrect":{"final":"That's just wrong, maybe have another go... Have you forgotten that Python keeps track of the last position saved in the file and position the next value immediately after it, with no space?"}},"_attempts":2,"_canShowModelAnswer":true,"_canShowFeedback":true,"_canShowMarking":true,"_shouldDisplayAttempts":false,"_isRandom":false,"_recordInteraction":true,"_questionWeight":1,"_allowsAnyCase":false,"_allowsPunctuation":false,"_buttons":{"_submit":{"buttonText":"","ariaLabel":""},"_reset":{"buttonText":"","ariaLabel":""},"_showCorrectAnswer":{"buttonText":"","ariaLabel":""},"_hideCorrectAnswer":{"buttonText":"","ariaLabel":""},"_showFeedback":{"buttonText":"","ariaLabel":""},"remainingAttemptsText":"","remainingAttemptText":""}},{"_id":"c-299","_parentId":"b-183","_type":"component","_component":"text","_classes":"","_layout":"full","title":"Reading data from file","displayTitle":"Reading data from file","body":"Data from a file can be read in character by character, specifying and controlling the position of the data within the file. However, it is often the case that data are separated and arranged in different lines, i.e. one value per line, hence we focus on reading entire lines of data rather than single characters of a line. To read lines into a list we can follow two ways.","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-300","_parentId":"b-183","_type":"component","_component":"graphic","_classes":"","_layout":"left","title":"","displayTitle":"","body":"<iframe width = '100%' height = '320' src=https://trinket.io/embed/python3/f42d88d1e7?toggleCode=true&runOption=></iframe>","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-301","_parentId":"b-183","_type":"component","_component":"graphic","_classes":"","_layout":"right","title":"","displayTitle":"","body":"<iframe width = '100%' height = '320' src=https://trinket.io/embed/python3/785464042a?toggleCode=true&runOption=></iframe>","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-302","_parentId":"b-183","_type":"component","_component":"text","_classes":"","_layout":"full","title":"","displayTitle":"","body":"In the second case, the variable line has a name of your choice. The for loop traverse the file and read in every single line of it into variable line. Variable line is then added to list <b>a</b> incrementally.<br> Important: After printing out the values of the list, you may have noticed two things: <ol><li>the elements in the list are <b>strings</b>, even though the file contained a sequence of <b>integer</b> numbers</li> <li>attached to every element there is the operator <b>endl</b> too</li></ol>Similarly to when writing values into a file, every data read from a file is read as type <b>string</b>, irrespectively of the actual type of data stored in the file. Hence, when reading lines into a list, the value will be read as strings. If we need to compute the data as numbers (either integer or float) we need to <b>convert</b> them first. <br><br> <iframe width = '100%' height = '360' src=https://trinket.io/embed/python3/7723699a73?toggleCode=true&runOption=></iframe> <br> <br> Because we are reading lines from files, Python will read also the special character <b>endl</b> denoting a new line, at the end of each line. However, if we convert the data into numbers, the <b>endl</b> operator is cut off and we need not worry about it.","instruction":"There are many more ways to control access, read from and write into files: for the sake of simplicity, for now we stop here.","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-303","_parentId":"b-184","_type":"component","_component":"text","_classes":"","_layout":"left","title":"Conditional Loops","displayTitle":"Conditional Loops","body":"We have learned that every time we need to iterate an action, like traversing a list, or a set of statements we can use the for loop. The for loop will traverse a range by incrementing automatically a counter within the given range. The variable i acts as the counter of the iterations, and, at every iteration, is incremented accordingly to the range, until reaching the end of the range. We do not need to worry counting the correct number of iterations, as this is done automatically by the for loop command.","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-304","_parentId":"b-184","_type":"component","_component":"graphic","_classes":"","_layout":"right","title":"","displayTitle":"","body":"<iframe width = '100%' height = '280' src=https://trinket.io/embed/python/8cf9239afd?toggleCode=true&runOption=></iframe>","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-305","_parentId":"b-184","_type":"component","_component":"text","_classes":"","_layout":"full","title":"","displayTitle":"","body":"Because the number of iterations and their counting is set <i>a priori</i> by the range, we know <i>a priori</i>, before performing any iteration, how many times we are going to iterate the process (or how many cycles we are going to loop). These types of iterations are also know as counted loops: the iterations are counted up to a value known before performance. So, for example, traversing a list is by a counted loop, as we know <i>a priori</i> that we have to count from one to the length of the list, as many times as the number of elements in the list. <br> There are cases when we need to iterate a process, but we do not know beforehand how many times the repetitions are needed. For example in the search algorithm, when we try to search for and find a given value within the list.","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-306","_parentId":"b-184","_type":"component","_component":"graphic","_classes":"","_layout":"left","_isOptional":true,"title":"c-306","displayTitle":"","body":"","instruction":"Given a list of numbers search if a given number is present in the list","_graphic":{"large":"course/en/images/ch4-p3.png","small":"course/en/images/ch4-p3.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-307","_parentId":"b-184","_type":"component","_component":"graphic","_classes":"","_layout":"right","title":"","displayTitle":"","body":"<iframe width = '100%' height = '260' src=https://trinket.io/embed/python/66bba92695?toggleCode=true&runOption=></iframe>","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-308","_parentId":"b-184","_type":"component","_component":"text","_classes":"","_layout":"left","title":"","displayTitle":"Conditional Loops","body":"When looking for an item in a list we would traverse the list and for every element of it, verify if the current element coincides with the one sought. Since we are traversing the list we would need a loop. However, we do not need to investigate all the elements in the list as, once the item has been found, we could stop traversing the list and interrupt the loop. There is no reason to keep searching if the object has been found. In such cases, we do not know <i>a priori</i> how many elements we have to scroll before finding the sought one, i.e. we do not know how many time the action of scrolling elements will be repeated. The termination of the loop is subject to the validation of a specific condition, i.e. the object has been found. <br>Loops subject to a condition are known as <b>Conditional Loops</b>, as opposed to <b>Counted Loops</b>. <br> In Python, Conditional Loops are implemented with the <b>while</b> loop statement... <br> <br> <iframe width = '100%' height = '280' src=https://trinket.io/embed/python/9e9fc3d232?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-309","_parentId":"b-184","_type":"component","_component":"graphic","_classes":"","_layout":"right","_isOptional":true,"title":"c-309","displayTitle":"","body":"<br>","_graphic":{"large":"course/en/images/ch4-p4.png","small":"course/en/images/ch4-p4.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-311","_parentId":"b-184","_type":"component","_component":"text","_classes":"","_layout":"left","title":"","displayTitle":"","body":"The while loop statement reads almost as it were English: while the object has not been found, examine the current element of the list; if the current element coincides with what sought flag it as found, otherwise examine the next element. More formally, these are the logical steps executed by the while loop statement: <ol><li>assess if the condition is <b>True</b> or <b>False</b></li> <li>if <b>False</b>, exit immediately the loop and do not iterate anymore</li> <li>if <b>True</b>, keep repeating the action described within the loop statement</li></ol> <br> There are some important concepts to be noted: <ol><li>since, the first time, the condition is examined immediately before entering the loop, the sentry variable determining the condition must be initialised. I.e. the variable found is set to <b>False</b> at the beginning, before starting the <b>while</b> loop. The initialisation is needed, otherwise the condition cannot be verified the first time, on entering the loop</li> <li>similarly to the for loop, we need a <b>counter</b>, namely the variable count in the example, to traverse the list. However, now the counter is not incremented <b>automatically</b> according to a specified range, but we need to take care of incrementing it</li> <li>more in general, we need to ensure that the loop is entered and that the loop does not run infinetely. This requires an <b>extra level of attention</b> as opposed when using Counted Loops (<b>for</b>)</li></ol>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-312","_parentId":"b-184","_type":"component","_component":"text","_classes":"","_layout":"left","title":"","displayTitle":"","body":"<iframe width = '100%' height = '200' src=https://trinket.io/embed/python/d1d7b1814a?toggleCode=true&runOption=></iframe> <br> In the following example the sentry variable is initialised, but incorrectly and the loop will never happen: <br> <br> <iframe width = '100%' height = '200' src=https://trinket.io/embed/python/b5c74df610?toggleCode=true&runOption=></iframe> <br> In the following example the sentry variable is initialised, but the loop will never stop: <br> <br> <iframe width = '100%' height = '200' src=https://trinket.io/embed/python/90719e761c?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-313","_parentId":"b-184","_type":"component","_component":"text","_classes":"","_layout":"full","title":"","displayTitle":"","body":"A typical example of condition mismanagement can be seen in the search algorithm, as introduced so far.","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-314","_parentId":"b-184","_type":"component","_component":"graphic","_classes":"","_layout":"left","_isOptional":true,"title":"c-314","displayTitle":"","body":"<iframe width = '100%' height = '300' src=https://trinket.io/embed/python/76bfce2ba6?toggleCode=true&runOption=></iframe>","instruction":"When the object sought is not present, the algorithm presented will induce exceeding the dimension of the list"},{"_id":"c-315","_parentId":"b-184","_type":"component","_component":"graphic","_classes":"","_layout":"right","_isOptional":true,"title":"c-315","displayTitle":"","body":"<iframe width = '100%' height = '300' src=https://trinket.io/embed/python/b0a6da40cf?toggleCode=true&runOption=></iframe>","instruction":"A correct vesrion of it could be seen above, by introducing an additional condition for entering the loop"},{"_id":"c-316","_parentId":"b-185","_type":"component","_component":"graphic","_classes":"","_layout":"right","_isOptional":true,"title":"c-316","displayTitle":"Counted Loops or Conditional Loops","body":"Counted Loops or Conditional Loops","_graphic":{"large":"course/en/images/ch4-p5.png","small":"course/en/images/ch4-p5.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-317","_parentId":"b-185","_type":"component","_component":"text","_classes":"","_layout":"right","title":"","displayTitle":"","body":"Whenever you need to iterate a set of statement and in need of a loop, it is good practice to ask yourself a simple question: <i>Do I know how many iterations will be needed?</i> <br> <br> In this way you are facilitated in choosing between for and while loops. <b>Counted Loops</b> can also be achieved with <b>Conditional Loops</b>, though the opposite is not true. <br> <b>Conditional Loops</b> offer far more flexibility and are more apt for a wider range of operations, as compared against <b>Counted Loops</b>. In fact, they are computationally more powerful than their counterpart. <br> <br> However, at the expense of an increased complexity. Conditional Loops are more errors prone, especially for less expert software developers.","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-318","_parentId":"b-185","_type":"component","_component":"accordion","_classes":"","_layout":"full","title":"Lecture summary","displayTitle":"This lecture at a glance","body":"To summarise today's efforts, you should now be familiar with the concept of indirect <b>input/output</b>, be confident in using <b>external files</b> to <b>read</b> and <b>write</b> data, and last but not least, be able to use <b>conditional loops loops</b> and to select to select between <b>conditional</b> and <b>counted</b> loops.","instruction":"Select the headings to find out more.","_items":[{"title":"I/O Files","body":"<ul> <li>Indirect methods imply reading data from or storing data into permanent files</li> <li>A file can be opened with the comman open() and specifying in it the name of the file and the mode of access</li> <li>If a file is opened in writing mode and it does not exist, it will be created</li> <li>With the current basic skills, we will be able to write string types data only</li> <li>Similarly to when writing values into a file, every data read from a file is read as type string</li></ul>"},{"title":"Conditional Loops","body":" <ul> <li>Loops subject to a condition are known as Conditional Loops</li> <li> In Python, Conditional Loops are implemented with the <b>while</b> loop statement</li> <li> Initialisation is needed for the <b>counter</b> variable, otherwise the condition cannot be verified the first time, on entering the loop</li> <li>The <b>counter</b> is not incremented automatically according to a specified range, but we need to take care of incrementing it</li><li>We need to ensure that the loop is entered and that the loop does not run infinetely</li> </ul>"}],"_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":true}},{"_id":"c-320","_parentId":"b-190","_type":"component","_component":"text","_classes":"","_layout":"full","title":"Good practice hints: removing the newline trail from file data","displayTitle":"Good practice hints: removing the newline trail from file data","body":"When processing data from other sources, one should be ready to adhere to various conventions and standards. For example, in Python, we have seen that informations are imported as strings, irrespective of their actual type of variable needed for further processing. Moreover, at the end of every line, the character <b>endl</b> is also loaded. Hencewise, one would like to easily get rid of the newline trail, which can be done using the function <b>rstrip</b> that removes any trailing characters at the end of a string. <br> <br> <iframe width = '100%' height = '270' src=https://trinket.io/embed/python/f826613b12?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-321","_parentId":"b-191","_type":"component","_component":"text","_classes":"","_layout":"left","title":"Tuples","displayTitle":"Tuples","body":"A Tuple, very much like a List, is a sequence of elements. The very first difference to point out is that Lists are <b>mutable</b> while Tuples are <b>immutable</b> (we will explore this difference more in detail later). <br> A tuple can contain elements of different types, hence it is possbile to have in the same tuple integer values, as well as strings and/or float and/or Boolean values. So, for example, we could have a tuple containing elements as your name, your tutorial group and your mark.","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-322","_parentId":"b-191","_type":"component","_component":"graphic","_classes":"","_layout":"right","_isOptional":true,"title":"c-322","displayTitle":"","body":"<br> <br> <br>","_graphic":{"large":"course/en/images/ch5-p1.png","small":"course/en/images/ch5-p1.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-323","_parentId":"b-191","_type":"component","_component":"graphic","_classes":"","_layout":"left","_isOptional":true,"title":"c-323","displayTitle":"","body":"<iframe width = '100%' height = '260' src=https://trinket.io/embed/python/78ea5d523d?toggleCode=true&runOption=></iframe>","instruction":""},{"_id":"c-324","_parentId":"b-191","_type":"component","_component":"text","_classes":"","_layout":"right","title":"","displayTitle":"","body":"Tuples are created with comma-separated list of values in brakets () <br> <br> Note that the tuple <b>a</b> contains strings values just as well as an integer value <br> <br> Just an exception when creating tuples: a tuple with a single element must include a final comma to be defined as tuple (otherwise it would be treated as a simple variable)","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-325","_parentId":"b-192","_type":"component","_component":"text","_classes":"","_layout":"left","title":"","displayTitle":"","body":"We access elements of a tuple in the very same way as we access elements in a list <br> <br> <iframe width = '100%' height = '200' src=https://trinket.io/embed/python/a6db12293b?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-326","_parentId":"b-192","_type":"component","_component":"text","_classes":"","_layout":"right","title":"","displayTitle":"","body":"Reverse indexing and slicing apply to tuples, just as they work on lists <br> <br> <iframe width = '100%' height = '200' src=https://trinket.io/embed/python/31ae7f4482?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-327","_parentId":"b-192","_type":"component","_component":"text","_classes":"","_layout":"left","title":"","displayTitle":"","body":"We can also concatenate tuples, just as we can with lists <br> <br> <iframe width = '100%' height = '200' src=https://trinket.io/embed/python/e9ebd33f0e?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-328","_parentId":"b-192","_type":"component","_component":"text","_classes":"","_layout":"right","title":"","displayTitle":"","body":"However, as tuples are immutable they cannot modified <br> <br> <iframe width = '100%' height = '200' src=https://trinket.io/embed/python/a8e9fbbd00?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-329","_parentId":"b-192","_type":"component","_component":"text","_classes":"","_layout":"left","title":"","displayTitle":"","body":"On the contrary, a list can be modified <br> <br> <iframe width = '100%' height = '200' src=https://trinket.io/embed/python/f0b8014d83?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-330","_parentId":"b-192","_type":"component","_component":"text","_classes":"","_layout":"right","title":"","displayTitle":"","body":"However, a tuple can be replaced with another one <br> <br> <iframe width = '100%' height = '200' src=https://trinket.io/embed/python/71b0ae5766?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-331","_parentId":"b-192","_type":"component","_component":"mcq","_classes":"","_layout":"full","_attempts":2,"_questionWeight":1,"_canShowModelAnswer":false,"_shouldDisplayAttempts":false,"_isRandom":true,"_selectable":4,"title":"","displayTitle":"","body":"Which of the following statemets is true?","instruction":"Choose up to four options and select Submit.","_items":[{"text":"Only strings are immutable, tuples can be modified just as lists","_shouldBeSelected":false},{"text":"Tuples can be concateneted","_shouldBeSelected":true},{"text":"Slicing does not apply to tuples","_shouldBeSelected":false},{"text":"A tuple can be concateneted to a list","_shouldBeSelected":false}],"_feedback":{"title":"Tuples","correct":"Spot on! Tuples can only be concatened to tuples","_partlyCorrect":{"final":"That's partly right! Tuples can only be concatened to tuples"},"_incorrect":{"final":"That's just wrong, maybe have another go..."}},"_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-332","_parentId":"b-193","_type":"component","_component":"text","_classes":"","_layout":"full","title":"","displayTitle":"","body":"The exciting part of tuples is that they do not need to contain necessarily values, but can also contain variables (or even a mix of values and variables) <br> <br> <iframe width = '100%' height = '240' src=https://trinket.io/embed/python/82673ce96a?toggleCode=true&runOption=></iframe>","instruction":"Note the difference between tuples t1 and t2","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-333","_parentId":"b-193","_type":"component","_component":"text","_classes":"","_layout":"left","title":"","displayTitle":"","body":"<br>A nice corollary of tuples containing variables as their values, is that we can swap the value of two variables with a tuple assignment, instead of using a third temp variable. <br> Both (a,b) and (b,a) are tuples. The right tuple (b,a) is first evaluated, with values (10,5). These values are then assigned to the left tuple (a,b), i.e. the values 10 and 5 are assigned in order to variables a and b","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-334","_parentId":"b-193","_type":"component","_component":"text","_classes":"","_layout":"right","title":"","displayTitle":"","body":" <iframe width = '100%' height = '200' src=https://trinket.io/embed/python/48a3ddfe33?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-335","_parentId":"b-194","_type":"component","_component":"text","_classes":"","_layout":"full","title":"Sequences of sequences","displayTitle":"Sequences of sequences","body":"It is possible to combine lists and tuples one within the other, both ways. For example we could have a list of tuples, or one elemnt of a tuple can contain a list (either as value or as a variable of type list). When a sequence is combined within another sequence, the way of accessing a value can be tricky and careful attention needs to be paid. Let's take a look at some examples to aid the understanding.","instruction":"Note the difference between tuples t1 and t2","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-336","_parentId":"b-194","_type":"component","_component":"text","_classes":"","_layout":"left","title":"List of tuples","displayTitle":"List of tuples","body":"We could have a tuple student, containing the name of a student, its tutorial group and its mark. This tuple format can be repeated for all the students of a class. However, to avoid having many variable tuples, i.e. student1, student2, etc., we could all group together into a list.","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-337","_parentId":"b-194","_type":"component","_component":"narrative","_classes":"","_layout":"right","_comment":"setCompletionOn = inview | allItems","_setCompletionOn":"allItems","_hasNavigationInTextArea":false,"title":"","displayTitle":"","_items":[{"_graphic":{"src":"course/en/images/ch5-p3.png","alt":"Placeholder graphic."}},{"_graphic":{"src":"course/en/images/ch5-p2.png","alt":"Placeholder graphic."}}],"_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-338","_parentId":"b-194","_type":"component","_component":"text","_classes":"","_layout":"left","title":"","displayTitle":"","body":" <iframe width = '100%' height = '300' src=https://trinket.io/embed/python/bda30d2139?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-339","_parentId":"b-194","_type":"component","_component":"text","_classes":"","_layout":"right","title":"","displayTitle":"","body":"<br> To access any value, we would need first to identify the position within the list, i.e. which students we are interested in. The student selected from the list is in the form of a tuple. <br> Then, we can access the element of the tuple specific to the selected student. <br> <br> <i>Note that for brevity we can select both the element of the list and the element of the tuple in one go with the double brackets arrangement","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-340","_parentId":"b-194","_type":"component","_component":"text","_classes":"","_layout":"left","title":"","displayTitle":"","body":"If we wish to add another student <b>('Orace','2a',63)</b>, we append it, as a tuple, to the list <br> <br> <iframe width = '100%' height = '300' src=https://trinket.io/embed/python/3c1678498b?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-341","_parentId":"b-194","_type":"component","_component":"text","_classes":"","_layout":"right","title":"","displayTitle":"","body":"However, if we wish to amend one value, i.e. change the mark of Carmen into 77 we will run into troubles as we cannot change values of tuples (tuples are immutable). Remembering that lists are mutable, what we could do instead is to alter the entire element of the list containing Carmen with a new tuple. The new tuple will be the same as the old one, except of the new mark: <br> <br> <iframe width = '100%' height = '180' src=https://trinket.io/embed/python/b27dac5974?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-342","_parentId":"b-195","_component":"textinput","_classes":"","_isOptional":false,"_isAvailable":true,"_isHidden":false,"_isVisible":true,"_isResetOnRevisit":"false","_ariaLevel":0,"_disableAccessibilityState":false,"title":"","displayTitle":"","body":"Using the window on the right, determine the average of the marks for the students in ME1. Input the value up to 1 decimal place (i.e. <b>22.8</b>)","_type":"component","_layout":"left","_onScreen":{"_isEnabled":false,"_classes":"","_percentInviewVertical":50},"instruction":"","_items":[{"_answers":["66.4"],"prefix":"","suffix":"","placeholder":"Enter a float value"}],"_feedback":{"correct":"Spot on!","_incorrect":{"final":"That's just wrong, maybe have another go... Please avoid challenge yourself to stay within Python rather than jump to Excel"}},"_attempts":2,"_canShowModelAnswer":true,"_canShowFeedback":true,"_canShowMarking":true,"_shouldDisplayAttempts":false,"_isRandom":false,"_recordInteraction":true,"_questionWeight":1,"_allowsAnyCase":false,"_allowsPunctuation":false,"_buttons":{"_submit":{"buttonText":"","ariaLabel":""},"_reset":{"buttonText":"","ariaLabel":""},"_showCorrectAnswer":{"buttonText":"","ariaLabel":""},"_hideCorrectAnswer":{"buttonText":"","ariaLabel":""},"_showFeedback":{"buttonText":"","ariaLabel":""},"remainingAttemptsText":"","remainingAttemptText":""}},{"_id":"c-343","_parentId":"b-195","_type":"component","_component":"text","_classes":"","_layout":"right","title":"","displayTitle":"","body":" <iframe width = '100%' height = '300' src=https://trinket.io/embed/python/10098b7cc5?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-344","_parentId":"b-196","_type":"component","_component":"text","_classes":"","_layout":"full","title":"Recommended solution","displayTitle":"Recommended solution","body":" <iframe width = '100%' height = '300' src=https://trinket.io/embed/python/f4ceed4c5f?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-345","_parentId":"b-196","_type":"component","_component":"text","_classes":"","_layout":"left","title":"Tuples containing lists","displayTitle":"Tuples containing lists","body":" A tuple can contain a list as constituent of one of its element. The following tuple contains: the name of a personal tutor, the number of tutees s/he has and the list of the tutees.","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-346","_parentId":"b-196","_type":"component","_component":"graphic","_classes":"","_layout":"right","_isOptional":true,"title":"c-346","displayTitle":"","body":"<br> <br>","_graphic":{"large":"course/en/images/ch5-p4.png","small":"course/en/images/ch5-p4.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-347","_parentId":"b-196","_type":"component","_component":"text","_classes":"","_layout":"left","title":"","displayTitle":"","body":"<br> To access the name of Charlie, we first need to address the element in the tuple. <br> Then we access the element of interest within the list. <br> <br> <i>Note that the two double accesses can be again combined in one selection using the double brackets arrangement.</i> <br> <br> Just as before, if we wish to add another tutee to the list of tutess, we need to remember that tuples are immutable, hence we need to replace the entire tuple with a new update one","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-348","_parentId":"b-196","_type":"component","_component":"text","_classes":"","_layout":"right","title":"","displayTitle":"","body":" <iframe width = '100%' height = '300' src=https://trinket.io/embed/python/9a1ef9d2d7?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-349","_parentId":"b-196","_type":"component","_component":"text","_classes":"","_layout":"left","title":"Tupled harder!","displayTitle":"Tupled harder!","body":"To get wilder, given a tuple of a personal tutor, we can compose a list of many personal tutors, ending up with a list of tuples containing a list. <br><iframe width = '100%' height = '200' src=https://trinket.io/embed/python/8e60739acd?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-350","_parentId":"b-196","_type":"component","_component":"graphic","_classes":"","_layout":"right","_isOptional":true,"title":"c-350","displayTitle":"","body":"<br>","_graphic":{"large":"course/en/images/ch5-p5.png","small":"course/en/images/ch5-p5.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-351","_parentId":"b-196","_type":"component","_component":"mcq","_classes":"","_layout":"full","_attempts":2,"_questionWeight":1,"_canShowModelAnswer":false,"_shouldDisplayAttempts":false,"_isRandom":true,"_selectable":1,"title":"","displayTitle":"","body":"What is the type of the structure <b>PT</b> from above","instruction":"Choose the correct option and select Submit.","_items":[{"text":"list","_shouldBeSelected":true},{"text":"tuple","_shouldBeSelected":false},{"text":"string","_shouldBeSelected":false},{"text":"iceman7","_shouldBeSelected":false}],"_feedback":{"correct":"Spot on!","_incorrect":{"final":"That's just wrong, maybe have another go... Don't forget that the terminal is always your friend, just use the command type()"}},"_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-352","_parentId":"b-197","_type":"component","_component":"text","_classes":"","_layout":"full","title":"Sorting algorithm","displayTitle":"Sorting algorithm","body":"Sorting data, together with searching data, is one of the fundamental processes in Computing. Being able to sort a list of data in a desired order, for example ascending or descending, is part of the art of Computing. Here we are going through a simple algorithm on how to perform such process. It will not be the most efficient method for sorting data, but it serves nicely for the purpose of understanding.","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-353","_parentId":"b-197","_type":"component","_component":"text","_classes":"","_layout":"left","title":"","displayTitle":"","body":"If we have a list of numbers, and would like to sort them in ascending (or similarly descending) order we could follow some intuitive steps. We could traverse the entire list and position in the first cell, i.e. at position 0, the smallest value of the list (after comparing the current element in position 0 with all the remaining values at positions 1 - 9). <br> <br> <iframe width = '100%' height = '300' src=https://trinket.io/embed/python/9c09573c03?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-354","_parentId":"b-197","_type":"component","_component":"graphic","_classes":"","_layout":"right","_isOptional":true,"title":"c-354","displayTitle":"","body":"","_graphic":{"large":"course/en/images/ch5-p11.png","small":"course/en/images/ch5-p11.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-355","_parentId":"b-197","_type":"component","_component":"text","_classes":"","_layout":"full","title":"","displayTitle":"","body":"After this step we can be sure that position 0 contains the smallest element of the list. Having fixed position 0, we can now focus on the remaining part, from position 1 to 9. To do so, we could repeat what done for position 0, by starting the sorting from position 1. We could traverse the list and position in the second cell, i.e. at position 1, the second smallest value of the list (after comparing the current element in position 1 with all the remaining values at positions 2 - 9). <br> <br> <iframe width = '100%' height = '420' src=https://trinket.io/embed/python/d81b887efd?toggleCode=true&runOption=></iframe> <br> <br> After this step we can be sure that position 0 contains the smallest element of the list and position 1 contains the second smallest element of the list. Having fixed positions 0 and 1, we can now focus on the remaining part, from position 2 to 9. <br> <br>By now it should be clear that we have entered an interative process and could do it with a counted loop, instead of rewriting the same part of code everytime. <br> <br> <iframe width = '100%' height = '320' src=https://trinket.io/embed/python/2aa45bcbd4?toggleCode=true&runOption=></iframe>","instruction":"Note that this method of sorting is not the most efficient, but it is quite intuitive and serves the purpose of understanding","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-356","_parentId":"b-197","_type":"component","_component":"accordion","_classes":"","_layout":"full","title":"Lecture summary","displayTitle":"This lecture at a glance","body":"To summarise today's efforts, you should now be familiar with the concept of <b>parsing</b> and the basic methods to eliminate unwanted charcaters using the function <b>rstrip()</b>, be familiar with the concept of <b>tuple</b> and their <immutable> status, but also be able to perform a basic <b>sort</b> algorithm.","instruction":"Select the headings to find out more.","_items":[{"title":"Data processing hints","body":"<ul> <li>The character <b>endl</b> is  loaded at the end of every line when reading data in Python</li> <li>To easily get rid of the newline trail use the function <b>rstrip()</b> </li>"},{"title":"Tuples","body":"<ul> <li>A Tuple, very much like a List, is a sequence of elements </li> <li> The very first difference to point out is that Lists are <b>mutable</b> while Tuples are <b>immutable</b> </li> <li> Tuples are created with comma-separated list of values in brakets () </li> <li>Reverse indexing and slicing apply to tuples, just as they work on lists</li> <li>We can also concatenate tuples, just as we can with lists</li> </ul>"},{"title":"Sorting algorithm","body":"<ul> <li>Being able to sort a list of data in a desired order, for example ascending or descending, is part of the art of Computing </li> <li> If we have a list of numbers, and would like to sort them in ascending (or similarly descending) order we could follow some intuitive steps </li> <li> We could traverse the entire list and position in the first cell, i.e. at position 0, the smallest value of the list </li> <li> This can be done repetitively for all the positions left, effectively decrementing the scope of the loop at each step </li> </ul>"}],"_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":true}},{"_id":"c-360","_parentId":"b-200","_type":"component","_component":"text","_classes":"","_layout":"left","title":"Recursive functions","displayTitle":"Recursive functions","body":"Recursion is a magical and logically powerful, though, difficult concept in Computing. <br>Recursion is when a function calls itself. <br> How this is possible may not seem so obvious, but it works. <br>  Let's explain it through a worked example: we would like to write a function that receives an integer number and does the countdown to zero, when a blastoff will be printed. <br> With the current knowledge we could write a function with an iterative countdown","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-361","_parentId":"b-200","_type":"component","_component":"text","_classes":"","_layout":"right","title":"","displayTitle":"<br>","body":" <iframe width = '100%' height = '290' src=https://trinket.io/embed/python/5322eadc97?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-362","_parentId":"b-200","_type":"component","_component":"text","_classes":"","_layout":"full","title":"","displayTitle":"","body":"An alternative way of performing the countdown would be: <br> <br> <iframe width = '100%' height = '290' src=https://trinket.io/embed/python/5322eadc97?toggleCode=true&runOption=></iframe> <br> <br> As a magic, without using for or while loops, we were able to repeat the same action of counting down to tle blastoff. The function Countdown invokes the blastoff if the number to count is the last one, i.e. n = 0, otherwise requests a countdown starting from the number below n-1. In the latter case, since the count down is performed by the function named <b>Countdown</b>, it does call itself again.","instruction":"A function calling itself is a <b>recursive</b> function.","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-363","_parentId":"b-200","_type":"component","_component":"graphic","_classes":"","_layout":"full","_isOptional":true,"title":"c-363","displayTitle":"","body":"","_graphic":{"large":"course/en/images/ch7-p1.png","small":"course/en/images/ch7-p1.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-364","_parentId":"b-200","_type":"component","_component":"text","_classes":"","_layout":"full","title":"<br>Multiple instances of recursive functions","displayTitle":"<br>Multiple instances of recursive functions","body":"Let's follow step by step the execution of the recursive function Countdown when n = 4 <ul> <li>The main script will invoke a count down starting from <b>n</b></li> <li>The function Countdown will start (Instance 1). Since n is not equal to zero, it will print the current number, n = 4 and will invoke another countdown, now starting from <b>n-1</b>, i.e. 3</li> <li>Another instance (Instance 2) of the function Countdown will start. Since n is not equal to zero, it will print the current number, n = 3 and will invoke another countdown, now starting from <b>n-1</b>, i.e. 2</li> <li>Another instance (Instance 3) of the function Countdown will start. Since n is not equal to zero, it will print the current number, n = 2 and will invoke another countdown, now starting from <b>n-1</b>, i.e. 1</li> <li>Another instance (Instance 4) of the function Countdown will start. Since n is not equal to zero, it will print the current number, n = 1 and will invoke another countdown, now starting from <b>n-1</b>, i.e. 0</li> <li>Another instance (Instance 5) of the function Countdown will start. This time n is equal to zero. The blast off will happen and the function finishes returning the flow to Instance 4</li> <li>Instance 4, in turn, will also finish, returning the flow to Instance 3</li> <li>Instance 3, in turn, will also finish, returning the flow to Instance 2</li> <li>Instance 2, in turn, will also finish, returning the flow to Instance 1</li> <li>Instance 1, in turn, will also finish, returning the flow to the main script</li> </ul>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-365","_parentId":"b-200","_type":"component","_component":"text","_classes":"","_layout":"full","title":"Stopping condition","displayTitle":"Stopping condition","body":"In order for a recursion to complete and not entering an infinite cycling, it is <b>paramount</b> that the recursive function has a <b>stopping condition</b>, i.e. at least an event when the function itself is not called anymore. <br> In the example above, the stopping condition occurrs when <b>n == 0</b>. In such case the function in not called anymore, as it had been the case in the instances before the condition occurred.<br>The variable <b>n</b> appears in every instance of the recursive function. However, within every instance it remains <b>private</b>, so that every variable n, even though named the same, is independent of the others.","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-366","_parentId":"b-200","_type":"component","_component":"text","_classes":"","_layout":"left","title":"Exercise: Fibonacci sequence","displayTitle":"Exercise: Fibonacci sequence","body":"The <b>Fibonacci set</b> is a mathematical sequence used to represent physical events such as spiral galaxies, hurricanes and the evolution of prolific species (like rabbits). The Fibonacci sequence is generated, starting from the seeds 1 and 1, by adding up the two previous numbers of the sequence","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-367","_parentId":"b-200","_type":"component","_component":"graphic","_classes":"","_layout":"right","_isOptional":true,"title":"c-367","displayTitle":"","body":"<br>","_graphic":{"large":"course/en/images/ch7-p2.png","small":"course/en/images/ch7-p2.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-368","_parentId":"b-200","_component":"textinput","_classes":"","_isOptional":false,"_isAvailable":true,"_isHidden":false,"_isVisible":true,"_isResetOnRevisit":"false","_ariaLevel":0,"_disableAccessibilityState":false,"title":"","displayTitle":"","body":"<b>Write a recursive function, Fibonacci, to compute the n-th Fibonacci number. Then write a script to make use of the function, to generate the first N numbers of the sequence. What is the sum of the 13th and the 15th terms of the sequence?","_type":"component","_layout":"left","_onScreen":{"_isEnabled":false,"_classes":"","_percentInviewVertical":50},"instruction":"","_items":[{"_answers":["843"],"prefix":"","suffix":"","placeholder":"Enter an integer value"}],"_feedback":{"title":"Fibonacci","correct":"Spot on!","_incorrect":{"final":"That's just wrong, maybe have another go..."}},"_attempts":2,"_canShowModelAnswer":true,"_canShowFeedback":true,"_canShowMarking":true,"_shouldDisplayAttempts":false,"_isRandom":false,"_recordInteraction":true,"_questionWeight":1,"_allowsAnyCase":false,"_allowsPunctuation":false,"_buttons":{"_submit":{"buttonText":"","ariaLabel":""},"_reset":{"buttonText":"","ariaLabel":""},"_showCorrectAnswer":{"buttonText":"","ariaLabel":""},"_hideCorrectAnswer":{"buttonText":"","ariaLabel":""},"_showFeedback":{"buttonText":"","ariaLabel":""},"remainingAttemptsText":"","remainingAttemptText":""}},{"_id":"c-369","_parentId":"b-200","_type":"component","_component":"text","_classes":"","_layout":"right","title":"","displayTitle":"","body":" <iframe width = '100%' height = '200' src=https://trinket.io/embed/python/6db30ee063?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-370","_parentId":"b-201","_type":"component","_component":"text","_classes":"","_layout":"left","title":"Matrices","displayTitle":"Matrices","body":"In Maths you have studied matrices as 2-dimensional tables of values. One of the most obvious representation of a matrix in Computing is through a list of lists. Every sublist represents a row of the matrix, whilst the collection of all the sublist (rows) will consitute the overall matrix. <br> <br> <iframe width = '100%' height = '140' src=https://trinket.io/embed/python/b6e68408d1?toggleCode=true&runOption=></iframe>","instruction":"Variable A represents the matrix with M rows and M columns","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-371","_parentId":"b-201","_type":"component","_component":"graphic","_classes":"","_layout":"right","_isOptional":true,"title":"c-371","displayTitle":"","body":"<br>","_graphic":{"large":"course/en/images/ch7-p3.png","small":"course/en/images/ch7-p3.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-372","_parentId":"b-201","_type":"component","_component":"graphic","_classes":"","_layout":"left","_isOptional":true,"title":"c-371","displayTitle":"","body":"<br>","_graphic":{"large":"course/en/images/ch7-p4.png","small":"course/en/images/ch7-p4.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-373","_parentId":"b-201","_type":"component","_component":"text","_classes":"","_layout":"right","title":"","displayTitle":"","body":"In order to visualise the list of lists in the commonplace matrix format, it is convenient to plot the variable line by line. A row can be easily addressed by its index. Whilst, if we wish to select a specific element of the matrix, we need the second index, addressing the column within the row specified by the first index <br> <br> <iframe width = '100%' height = '280' src=https://trinket.io/embed/python/211c857fdb?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-374","_parentId":"b-201","_type":"component","_component":"text","_classes":"","_layout":"full","title":"","displayTitle":"","body":"In order to travers all the cell of the matrix, we need two loops: one traversing all the row and a second one traversing all the columns for every row <br> <br> <iframe width = '100%' height = '180' src=https://trinket.io/embed/python/dc04e1fbdf?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-375","_parentId":"b-201","_type":"component","_component":"text","_classes":"","_layout":"left","title":"","displayTitle":"","body":"<iframe width = '100%' height = '220' src=https://trinket.io/embed/python/948d105f0f?toggleCode=true&runOption=></iframe>","instruction":"One could also traverse the matrix using the indices","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-376","_parentId":"b-201","_type":"component","_component":"text","_classes":"","_layout":"right","title":"","displayTitle":"","body":"<iframe width = '100%' height = '220' src=https://trinket.io/embed/python/d680105e73?toggleCode=true&runOption=></iframe>","instruction":"One could also traverse the matrix by columns first, i.e. vertically first","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-377","_parentId":"b-202","_component":"textinput","_classes":"","_isOptional":false,"_isAvailable":true,"_isHidden":false,"_isVisible":true,"_isResetOnRevisit":"false","_ariaLevel":0,"_disableAccessibilityState":false,"title":"","displayTitle":"","body":"<b>The file MatA.txt contains the values of a matrix of size 60x60. Entries of the matrix are stored in the file one value per line, sequentially as shown on the right. Read in the numerical values of the file and form the two matrix A accordingly. What is the sum of the elements from the 17th column?","_type":"component","_layout":"left","_onScreen":{"_isEnabled":false,"_classes":"","_percentInviewVertical":50},"instruction":"","_items":[{"_answers":["2778"],"prefix":"","suffix":"","placeholder":"Enter an integer value"}],"_feedback":{"title":"MatrixRead","correct":"Spot on!","_incorrect":{"final":"That's just wrong, maybe have another go... Please note the count starts from 0 in Python!"}},"_attempts":2,"_canShowModelAnswer":true,"_canShowFeedback":true,"_canShowMarking":true,"_shouldDisplayAttempts":false,"_isRandom":false,"_recordInteraction":true,"_questionWeight":1,"_allowsAnyCase":false,"_allowsPunctuation":false,"_buttons":{"_submit":{"buttonText":"","ariaLabel":""},"_reset":{"buttonText":"","ariaLabel":""},"_showCorrectAnswer":{"buttonText":"","ariaLabel":""},"_hideCorrectAnswer":{"buttonText":"","ariaLabel":""},"_showFeedback":{"buttonText":"","ariaLabel":""},"remainingAttemptsText":"","remainingAttemptText":""}},{"_id":"c-378","_parentId":"b-202","_type":"component","_component":"graphic","_classes":"","_layout":"left","_isOptional":true,"title":"c-371","displayTitle":"","body":"","_graphic":{"large":"course/en/images/ch7-p6.png","small":"course/en/images/ch7-p6.png","alt":"Placeholder graphic.","attribution":""}},{"_id":"c-379","_parentId":"b-202","_type":"component","_component":"text","_classes":"","_layout":"full","title":"","displayTitle":"","body":"<iframe width = '100%' height = '400' src=https://trinket.io/embed/python/fa3516f9e0?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-380","_parentId":"b-203","_type":"component","_component":"text","_classes":"","_layout":"full","title":"Recommended solution","displayTitle":"Recommended solution","body":"<iframe width = '100%' height = '400' src=https://trinket.io/embed/python/5b6d0020f9?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-381","_parentId":"b-203","_type":"component","_component":"accordion","_classes":"","_layout":"full","title":"Lecture summary","displayTitle":"This lecture at a glance","body":"To summarise today's efforts, you should now be familiar with the concept of <b>recursion</b> and its modus operandi. For example, one might come accross the importance of stopping conditions and the differences between iterative counts and recursive methods. Furthermore, you should be familiar with some methods regarding <b>matrices</b> and how the information can be stored and processed in bi-dimensional tables.","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-390","_parentId":"b-210","_type":"component","_component":"text","_classes":"","_layout":"full","title":"","displayTitle":"","body":"Every script coded so far has been written into one single piece of code, with a continuous and some times long, sequence of instructions. <br>Time is now mature to start coding as a grown up. <br>First of all, we should depart from coding into the notebook, and use other environments, such as Spider, and, most importantly, start writing a single file for every specific problem and/or task. <br>By doing so we start thinking as structuring all our codes as independent pieces, each devoted to solve a specific problem and with a specific functionality. <br>Examples of such similar specialised codes are the mathematical functions that we have already encountered and used. Beyond each of these functions there is a piece of code, written by someone else, devoted to perform the specific function they represent only. <br>By doing so, we are able to subdivide complex problems and large codes, into smaller and more approachable sub-problems. We can then focus, separately and independently, on each of these sub-problems, with lesser difficulties. This approach is also known as Top-Down; i.e. starting from a large problem, to subdivide it into smaller problems, and keep doing so into sub-sub-problems, until these become enough simple to be solved with high accuracy. <br> In Computing, these sub-problems can be implemented with single pieces of codes known as Functions.  <br> Every Function is devoted to solve only one specific task, and nothing else. For example, we can have a function that computes the factorial of a number, or a function that sort a list of values, or a function that search for a value in a list, or a function that computes the exponential of a number (this function is available in the math module already, but we are going to write one ourself to show our pride!!)","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-391","_parentId":"b-210","_type":"component","_component":"text","_classes":"","_layout":"left","title":"Defining a function","displayTitle":"Defining a function","body":"First of all, before defining any function, we need to christen it with a <b>name</b>, in the same way as we christen variables with identifiers. It is god practice to choose meaningful names for the functions. <br> Let's define and write a function that counts the number of elements in a list; that would be the equivalent of the function you know already <b>len()</b>. <br> To stay meaningful, we could choose the name <b>Count()</b> for such function. <br> <br> <b>def</b> defines the context of a function: every instruction embedded in it will be executed by the function only and limited to it. The assignment a = 2 is part of <b>func1</b> only, whilst b = 3 belongs to <b>func2</b> only. After all the instruction in a function have been completed, the function has finished its job.","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-392","_parentId":"b-210","_type":"component","_component":"text","_classes":"","_layout":"right","title":"","displayTitle":"","body":"<iframe width = '100%' height = '430' src=https://trinket.io/embed/python/55c7138d6c?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-393","_parentId":"b-210","_type":"component","_component":"text","_classes":"","_layout":"full","title":"Invoking a function","displayTitle":"Invoking a function","body":"Every function is a stand alone entity, that remains in stand-by until it is invoked. To invoke a function, i.e. to activate and execute it, we need to call it. (Invoking a function is also known as calling a function). Often we call functions from a script, that would be our main script. <br> <br> <iframe width = '100%' height = '460' src=https://trinket.io/embed/python/440568f35b?toggleCode=true&runOption=></iframe> <br> <br>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-394","_parentId":"b-211","_type":"component","_component":"text","_classes":"","_layout":"left","title":"","displayTitle":"","body":"Please note that: <ol><li>Any function, when invoked, needs to have been already defined before, i.e. <b>Xmas()</b> and <b>NewYear()</b> need to be written before the main script, where they are invoked</li> <li>A function is invoked by writing its name/identifier at the point of the script where we wish the function should start performing</li> <li>When a function is called, the script hands over the control of the flow to the function. All the statements within the function are performed, and only when the function has finished, the control of the flow is handed back to the main script. Observe the sequence of printed messages and where they are stated in the script</li> <li>Once the control of the flow is handed back to the main script, the sequence continues immediately after the point where the function is invoked</li></ol> Functions do not have to be invoked necessarily from main scripts only, but can indeed be called at any point within other functions: try to follow the sequence of events in the example on the right","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-397","_parentId":"b-211","_type":"component","_component":"text","_classes":"","_layout":"right","title":"","displayTitle":"","body":"<iframe width = '100%' height = '500' src=https://trinket.io/embed/python/e756c3146f?toggleCode=true&runOption=></iframe>","instruction":"Note that every function called has to be defined already","_pageLevelProgress":{"_isEnabled":false,"_isCompletionIndicatorEnabled":false}},{"_id":"c-398","_parentId":"b-211","_type":"component","_component":"text","_classes":"","_layout":"full","title":"","displayTitle":"","body":"As seen, functions can be considered stand alone, independent pieces of code: whatever happens in a function stays within the function. This is true even for variables: every variable used within a function remains private within the function and ceases to exist after the function is completed. <br> Variables within a function are said to be <b>private</b> variables. Variables with same name in different functions, remain private within each function. Their values is valid and accessible only within the function. Once the function terminates, their private values disappears. <br> <br> <iframe width = '100%' height = '640' src=https://trinket.io/embed/python/8f7d1fd74d?toggleCode=true&runOption=></iframe> <br> <br>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-399","_parentId":"b-212","_type":"component","_component":"text","_classes":"","_layout":"full","title":"","displayTitle":"","body":"Until now we have been examining functions that did not require any data from the caller. However, how it is often the case, functions need to receive some values or data from the caller, so they can analyse and/or compute these data. For example, the function <b>sin()</b> would need to know at which angle we wish to find the sine value or, if we wish to compute the power of a number, we would need to tell the dedicated function the base and the exponent.","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-400","_parentId":"b-212","_type":"component","_component":"text","_classes":"","_layout":"left","title":"Input arguments","displayTitle":"Input arguments","body":"Every time a function needs some values these are called input arguments. Variable arguments, same as other variables in functions are <b>Private</b>. <br> <br>They cease to exist once the function is completed. Any use outside the function will result in an <b>error</b>.","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-401","_parentId":"b-212","_type":"component","_component":"text","_classes":"","_layout":"right","title":"","displayTitle":"","body":"<iframe width = '100%' height = '240' src=https://trinket.io/embed/python/ddab0d9559?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-402","_parentId":"b-212","_type":"component","_component":"text","_classes":"","_layout":"left","title":"","displayTitle":"","body":"<iframe width = '100%' height = '270' src=https://trinket.io/embed/python/4c0d66223d?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-403","_parentId":"b-212","_type":"component","_component":"text","_classes":"","_layout":"right","title":"Arguments postition","displayTitle":"Arguments postition","body":"Values are passed from the caller to the function, through the arguments, when the function is invoked. <br> <br> The position of the values in the caller must match the position of the arguments in the function","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-404","_parentId":"b-212","_type":"component","_component":"text","_classes":"","_layout":"full","title":"","displayTitle":"","body":"Since variables in functions are private, we could also use variables with same names in the caller main script <br> <br> <iframe width = '100%' height = '340' src=https://trinket.io/embed/python/f090b1d421?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-405","_parentId":"b-212","_type":"component","_component":"text","_classes":"","_layout":"full","title":"","displayTitle":"","body":"It is important that the exact number and type of arguments requested by a function are passed when calling it <br> <br> <iframe width = '100%' height = '340' src=https://trinket.io/embed/python/43165e4d7d?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-406","_parentId":"b-213","_type":"component","_component":"text","_classes":"","_layout":"left","title":"","displayTitle":"","body":"Until now, all the functions we have seen as examples, perform some tasks within themselves, i.e. they compute some maths and print out the results or just print out some results based on conditions. <br>None of the functions above provide back to the caller some result or some values. However, in the same way as function may need some values as input from the caller, they are able to provide back to the caller some other values in return. <br> Hence, in the same way as a function can have input arguments, it may have output arguments as well.<br>The function <b>Power</b>, for instance, can provide back the result, without printing it. <br> By doing so, the value of variable p, after being computed, is given back to the caller for any subsequent use within the main script. The variable <b>p</b> is an <b>output argument</b> for the function Power, in the same way as the variables base and exponent are input arguments: <br> <br> <iframe width = '100%' height = '240' src=https://trinket.io/embed/python/b2ab2f7d1b?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-407","_parentId":"b-213","_type":"component","_component":"text","_classes":"","_layout":"right","title":"","displayTitle":"","body":"In presence of an output argument it is essential for the caller to be able to receive back some values from the invoked function. This act of receiving can be implemented by assigning the output value from the function to a <b>local variable</b> within the caller: <br> <br> <iframe width = '100%' height = '240' src=https://trinket.io/embed/python/9ebd3c7a9c?toggleCode=true&runOption=></iframe> <br> <br> The variable <b>res</b> receives the outcome from function <b>Power</b>. The function <b>Power</b> is firstly invoked, the two values of the two variables base and exponent are passed as input arguments. The function computes the power into variable p. At the end of the function, the value of variable p is passed back to the main script, as contemporarily the function ceases to exist. When the return statement is invoked, it will result in the immediate exit and end of the function. The function will imemdiately estinguishes. As the function estinguishes, the value of p is received by and into variable res. Variable res is private within the main script, and will contain the value given to it from p.","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-408","_parentId":"b-213","_type":"component","_component":"text","_classes":"","_layout":"full","title":"","displayTitle":"","body":"Note that we could have used as receiving variable a variable named <b>p</b> as well. Variable p in the <b>main</b> is different from variable p in the <b>function</b>. Each is <b>private</b> to its part of the code: <br> <br> <iframe width = '100%' height = '300' src=https://trinket.io/embed/python/acfa97de12?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-409","_parentId":"b-213","_type":"component","_component":"text","_classes":"","_layout":"left","title":"","displayTitle":"","body":"If a function needs to return more than one variable, the output arguments can be put in the form of a <b>tuple</b>, as we cannot have two return statements in succession (the first return will estinguish the function immediately and impede for the second return to happen): <br> <br> <iframe width = '100%' height = '300' src=https://trinket.io/embed/python/6395b97b9c?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-410","_parentId":"b-213","_type":"component","_component":"text","_classes":"","_layout":"right","title":"","displayTitle":"","body":"By using a tuple we can pass back both variables Sum and Power at the same time, such as the second return is not needed and the function operates properly. Of course, if a function is passing back a tuple as output arguments, the caller must be ready to receive them in form of a tuple: <br> <br> <iframe width = '100%' height = '300' src=https://trinket.io/embed/python/e44df09036?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-411","_parentId":"b-214","_type":"component","_component":"text","_classes":"","_layout":"full","title":"","displayTitle":"<br>","body":"A special attention is needed when passing lists as arguments. Since lists are referenced, by changing the value of a list in the function any change is reflected into the caller. <br>List <b>a</b> is passed as argument to variable <b>add10</b>. List <b>L</b> receives the reference to list <b>a</b>, hence it is still referring to the same list. Now there are two identifiers, <b>a</b> in main and <b>L</b> in function <b>add2</b>, both pointing to the same physical list. Both the pointers <b>a</b> and <b>L</b> are privates to their part of code, but the actual list is the same. <br> The function <b>add10</b> alters the content of the list addressed by <b>L</b>. By doing so, the physical list is altered with new values (plus ten). The content of <b>L</b>, i.e. the reference to the list is passed back to the main into variable <b>b</b>. Variable <b>L</b> ends its course as the functione estinguishes. <br> Variable <b>b</b> points to a list with values altered. But that same list was also pointed by variable <b>a</b>. Hence, printing <b>a</b> and <b>b</b> will give the same output. <br> <br> <iframe width = '100%' height = '300' src=https://trinket.io/embed/python/e74aa81796?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-412","_parentId":"b-214","_type":"component","_component":"text","_classes":"","_layout":"full","title":"Lists as arguments","displayTitle":"Lists as arguments","body":"Another example. Function <b>add20</b> adds 20 to a list of numbers and doesn't return anything. Nevertheless, since the argument is a list, any change made to it in the function is reflected into the main script too. <br> <br> <iframe width = '100%' height = '300' src=https://trinket.io/embed/python/3ff2f94f41?toggleCode=true&runOption=></iframe> <br> <br> As a general good practice, it is safer to keep separated variables within the functions from variables within the main script or the caller. <br> To do so in presence of lists, it is better, within the function, to create any returning list as new lists. <br> List <b>a</b> is passed to the function through argument <b>inp</b>. (<b>a</b> and <b>inp</b> are pointing to the same list, each privately from main and from function) <br> A new list <b>out</b> is created, adding 10 to any value of <b>inp</b>. (<b>out</b> points to the <b>new list</b>, which is physically different from the inputted list) <br> The value of <b>out</b> is returned to the main into variable <b>b</b>. Variables <b>inp</b> and <b>out</b> estinguish. <br> Variable <b>b</b> points to the new list, whilst variable <b>a</b> points to the initial list, which remained unaltered. <br> <br> <iframe width = '100%' height = '320' src=https://trinket.io/embed/python/aad911f207?toggleCode=true&runOption=></iframe>","instruction":"","_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":false}},{"_id":"c-413","_parentId":"b-214","_type":"component","_component":"accordion","_classes":"","_layout":"full","title":"Lecture summary","displayTitle":"This lecture at a glance","body":"To summarise today's efforts, you should now be familiar with the concept of <b>functions</b> and their associated modus operandi. For example, one might come accross defining/invoking functions. Furthermore, you should be familiar with the concept of <b>arguments</b> and how they should be managed to avoid confusion.","instruction":"Select the headings to find out more.","_items":[{"title":"Defining and invoking","body":"<ul> <li>It is god practice to choose meaningful names for the functions</li> <li>Every function is a stand alone entity, that remains in stand-by until it is invoked </li> <li>To invoke a function, i.e. to activate and execute it, we need to call/invoke it </li> <li>Any function, when invoked, needs to have been already defined before</li> <li>A function is invoked by writing its name/identifier at the point of the script where we wish the function should start performing</li> <li>When a function is called, the script hands over the control of the flow to the function</li></ul>"},{"title":"Arguments of a function","body":"<ul> <li>Functions need to receive some values or data from the caller in order to analyse/process information</li> <li>Every time a function needs some values these are called input arguments </li> <li> In the same way as a function can have input arguments, it may have output arguments </li> <li>If a function needs to return more than one variable, the output arguments can be put in the form of a <b>tuple</b></li> <li>A special attention is needed when passing lists as arguments</li> <li>Since lists are referenced, by changing the value of a list in the function any change is reflected into the caller</li> </ul>"}],"_pageLevelProgress":{"_isEnabled":true,"_isCompletionIndicatorEnabled":true}}]